@page "/management/product"
@using AntDesign.TableModels
@using WebApp.Models
@using WebApp.Models.DTOs
@inject IProductService productService
@inject ICategoryService categoryService
@inject IBrandService brandService
@inject MessageService MessageService


<PageTitle>Quản lý sản phẩm</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Appstore" />
        <span>Quản lý sản phẩm</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="() => ShowCreateModal()">
            <Icon Type="plus" Theme="IconThemeType.Outline" />
            Thêm mới
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@_searchText" 
        Placeholder="Tìm kiếm sản phẩm..." 
        Style="width: 200px" 
        OnChange="@(async (string value) => await OnSearch(value))" />
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Default" OnClick="ShowFilterModal">
            <Icon Type="filter" Theme="IconThemeType.Outline" />
            Lọc
        </Button>
    </SpaceItem>
    <SpaceItem>
        @if (_currentFilter.Any())
        {
            <Button Type="@ButtonType.Default" OnClick="ClearFilters">
                <Icon Type="clear" Theme="IconThemeType.Outline" />
                Xóa bộ lọc
            </Button>
        }
    </SpaceItem>
    <SpaceItem>
        <Select TItem="int" 
        TItemValue="int" 
        Style="width: 120px" 
        @bind-Value="@pageSize" 
        OnChange="@(async (int value) => await OnPageSizeChange(value))">
            <SelectOptions>
                <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / trang" />
            </SelectOptions>
        </Select>
    </SpaceItem>
</Space>

<p />

<Table @ref=_table
TItem="ProductDto"
DataSource="@_data"
Total="@totalItems"
PageSize="@pageSize"
PageIndex="@pageIndex"
OnChange="@OnTableChange"
Loading="_loading">
    <PropertyColumn Property="c=>c.Name" Title="Tên sản phẩm" />
    <PropertyColumn Property="c=>c.Description" Title="Mô tả" />
    <PropertyColumn Property="c=>c.Price" Title="Giá" Format="#,0 VNĐ" />
    <PropertyColumn Property="c=>c.SalePrice" Title="Giá khuyến mãi" Format="#,0 VNĐ" />
    <PropertyColumn Property="c=>c.CategoryName" Title="Danh mục" />
    <PropertyColumn Property="c=>c.BrandName" Title="Thương hiệu" />
    <ActionColumn Title="Thao tác">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Xác nhận xóa?"
                OkText="Có"
                CancelText="Không"
                OnConfirm="() => OnDelete(context.Id)">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="@("Tạo sản phẩm")"
Visible="@_createModalVisible"
OnOk="@OnCreateOk"
OnCancel="@OnCreateCancel"
Width="800">
    <Form Model="@_newProduct" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên sản phẩm">
            <Input @bind-Value="@_newProduct.Name" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="@_newProduct.Description" />
        </FormItem>
        <FormItem Label="Giá">
            <AntDesign.InputNumber @bind-Value="@_newProduct.Price" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Giá khuyến mãi">
            <AntDesign.InputNumber @bind-Value="@_newProduct.SalePrice" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Danh mục">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_newProduct.CategoryId"
            Placeholder="Chọn danh mục">
                <SelectOptions>
                    @foreach (var category in _categories)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Thương hiệu">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_newProduct.BrandId"
            Placeholder="Chọn thương hiệu">
                <SelectOptions>
                    @foreach (var brand in _brands)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Hình ảnh chính">
            <Input @bind-Value="@_newProduct.MainImage" />
        </FormItem>
        <FormItem Label="Hình ảnh phụ">
            <Input @bind-Value="@_newProduct.Image" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Chỉnh sửa sản phẩm")"
Visible="@_editModalVisible"
OnOk="@OnEditOk"
OnCancel="@OnEditCancel"
Width="800">
    <Form Model="@_editProduct" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên sản phẩm">
            <Input @bind-Value="@_editProduct.Name" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="@_editProduct.Description" />
        </FormItem>
        <FormItem Label="Giá">
            <AntDesign.InputNumber @bind-Value="@_editProduct.Price" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Giá khuyến mãi">
            <AntDesign.InputNumber @bind-Value="@_editProduct.SalePrice" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Danh mục">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_editProduct.CategoryId"
            Placeholder="Chọn danh mục">
                <SelectOptions>
                    @foreach (var category in _categories)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Thương hiệu">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_editProduct.BrandId"
            Placeholder="Chọn thương hiệu">
                <SelectOptions>
                    @foreach (var brand in _brands)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Hình ảnh chính">
            <Input @bind-Value="@_editProduct.MainImage" />
        </FormItem>
        <FormItem Label="Hình ảnh phụ">
            <Input @bind-Value="@_editProduct.Image" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Lọc sản phẩm")"
Visible="@_filterModalVisible"
OnOk="@OnFilterOk"
OnCancel="@OnFilterCancel"
Width="600">
    <Form Model="@_filterModel" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên sản phẩm">
            <Input @bind-Value="@_filterModel.Name" />
        </FormItem>
        <FormItem Label="Danh mục">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_filterModel.CategoryId"
            Placeholder="Chọn danh mục">
                <SelectOptions>
                    @foreach (var category in _categories)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Thương hiệu">
            <Select TItem="string"
            TItemValue="string"
            @bind-Value="@_filterModel.BrandId"
            Placeholder="Chọn thương hiệu">
                <SelectOptions>
                    @foreach (var brand in _brands)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Giá từ">
            <AntDesign.InputNumber @bind-Value="@_filterModel.MinPrice" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Giá đến">
            <AntDesign.InputNumber @bind-Value="@_filterModel.MaxPrice" Style="width: 100%" />
        </FormItem>
    </Form>
</Modal>

@code {



    private IEnumerable<ProductDto> _data = [];
    private ITable _table;
    private ProductDto _newProduct = new();
    private ProductDto _editProduct = new();
    private bool _loading = true;
    private string _searchText = "";
    private bool _createModalVisible = false;
    private bool _editModalVisible = false;
    private bool _filterModalVisible = false;
    private PaginationData<ProductDto> _paginationData = new();
    private FilterModel _filterModel = new();
    private Dictionary<string, string> _currentFilter = new();
    private List<CategoryDto> _categories = new();
    private List<BrandDto> _brands = new();

    private int pageSize = 5;
    private int pageIndex = 1;
    private int totalItems = 0;

    private class FilterModel
    {
        public string Name { get; set; } = "";
        public string? CategoryId { get; set; }
        public string? BrandId { get; set; }
        public double? MinPrice { get; set; }
        public double? MaxPrice { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadCategories();
        await LoadBrands();
    }


    private async Task LoadCategories()
    {
        // await Task.Delay(100);
        try
        {
            var result = await categoryService.GetAll();
            _categories = result.ToList();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải danh mục: {ex.Message}");
        }
    }

    private async Task LoadBrands()
    {
        // await Task.Delay(100);
        try
        {
            var result = await brandService.GetAll();
            _brands = result.ToList();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải thương hiệu: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        _loading = true;

        await Task.Delay(100);
        try 
        {
            if (_currentFilter.Any())
            {
                _paginationData = await productService.FilterAndPagin(pageIndex, pageSize, _currentFilter);
            }
            else
            {
                _paginationData = await productService.GetPagination(pageIndex, pageSize);
            }
            _data = _paginationData.Data;
            totalItems = _paginationData.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        if (!string.IsNullOrEmpty(value))
        {
            _currentFilter["name"] = value;
        }
        else
        {
            _currentFilter.Remove("name");
        }
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private void ShowFilterModal()
    {
        _filterModel = new FilterModel
        {
            Name = _currentFilter.GetValueOrDefault("name", ""),
            CategoryId = _currentFilter.GetValueOrDefault("categoryId"),
            BrandId = _currentFilter.GetValueOrDefault("brandId"),
            MinPrice = _currentFilter.ContainsKey("minPrice") ? double.Parse(_currentFilter["minPrice"]) : null,
            MaxPrice = _currentFilter.ContainsKey("maxPrice") ? double.Parse(_currentFilter["maxPrice"]) : null
        };
        _filterModalVisible = true;
    }

    private async Task OnFilterOk()
    {
        _currentFilter.Clear();
        if (!string.IsNullOrEmpty(_filterModel.Name))
            _currentFilter["name"] = _filterModel.Name;
        if (!string.IsNullOrEmpty(_filterModel.CategoryId))
            _currentFilter["categoryId"] = _filterModel.CategoryId;
        if (!string.IsNullOrEmpty(_filterModel.BrandId))
            _currentFilter["brandId"] = _filterModel.BrandId;
        if (_filterModel.MinPrice.HasValue)
            _currentFilter["minPrice"] = _filterModel.MinPrice.Value.ToString();
        if (_filterModel.MaxPrice.HasValue)
            _currentFilter["maxPrice"] = _filterModel.MaxPrice.Value.ToString();

        pageIndex = 1;
        await LoadData();
        _filterModalVisible = false;
    }

    private void OnFilterCancel()
    {
        _filterModalVisible = false;
    }

    private void ShowCreateModal()
    {
        _newProduct = new ProductDto();
        _createModalVisible = true;
    }

    private void ShowEditModal(ProductDto product)
    {
        _editProduct = new ProductDto
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            SalePrice = product.SalePrice,
            CategoryId = product.CategoryId,
            BrandId = product.BrandId,
            MainImage = product.MainImage,
            Image = product.Image
        };
        _editModalVisible = true;
    }

    private async Task OnCreateOk()
    {
        try
        {
            await productService.Create(_newProduct);
            MessageService.Success("Thêm sản phẩm thành công!");
            _createModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi thêm sản phẩm: {ex.Message}");
        }
    }

    private void OnCreateCancel()
    {
        _createModalVisible = false;
    }

    private async Task OnEditOk()
    {
        try
        {
            await productService.Update(_editProduct);
            MessageService.Success("Cập nhật sản phẩm thành công!");
            _editModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật sản phẩm: {ex.Message}");
        }
    }

    private void OnEditCancel()
    {
        _editModalVisible = false;
    }

    private async Task OnDelete(string id)
    {
        try
        {
            await productService.Delete(id);
            MessageService.Success("Xóa sản phẩm thành công!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }

    private async Task OnTableChange(QueryModel<ProductDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private async Task ClearFilters()
    {
        _currentFilter.Clear();
        _searchText = "";
        _filterModel = new FilterModel();
        pageIndex = 1;
        await LoadData();
        MessageService.Success("Đã xóa bộ lọc!");
    }
}
