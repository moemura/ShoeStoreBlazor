@page "/products"
@using AntDesign.TableModels
@using WebApp.Data.Interfaces
@using WebApp.Models
@using WebApp.Models.DTOs
@inject IProductService productService
@inject ICategoryService categoryService
@inject IBrandService brandService
@inject ISizeService sizeService
@inject IImageStorageService imgurService
@inject MessageService MessageService


<PageTitle>Quản lý sản phẩm</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Appstore" />
        <span>Quản lý sản phẩm</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="() => ShowCreateModal()">
            <Icon Type="plus" Theme="IconThemeType.Outline" />
            Thêm mới
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@_searchText"
               Placeholder="Tìm kiếm sản phẩm..."
               Style="width: 200px"
               OnChange="@(async (string value) => await OnSearch(value))" />
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Default" OnClick="ShowFilterModal">
            <Icon Type="filter" Theme="IconThemeType.Outline" />
            Lọc
        </Button>
    </SpaceItem>
    <SpaceItem>
        @if (_currentFilter.Any())
        {
            <Button Type="@ButtonType.Default" OnClick="ClearFilters">
                <Icon Type="clear" Theme="IconThemeType.Outline" />
                Xóa bộ lọc
            </Button>
        }
    </SpaceItem>
    <SpaceItem>
        <Select TItem="int"
                TItemValue="int"
                Style="width: 120px"
                @bind-Value="@pageSize"
                OnChange="@(async (int value) => await OnPageSizeChange(value))">
            <SelectOptions>
                <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / trang" />
            </SelectOptions>
        </Select>
    </SpaceItem>
</Space>

<p />

<Table @ref=_table
       TItem="ProductDto"
       DataSource="@_data"
       Total="@totalItems"
       PageSize="@pageSize"
       PageIndex="@pageIndex"
       OnChange="@OnTableChange"
       Loading="_loading">
    <ActionColumn>
        <Avatar Size="@("4rem")" Src="@context.MainImage" />
    </ActionColumn>
    <PropertyColumn Property="c=>c.Name" Title="Tên sản phẩm" />
    <PropertyColumn Property="c=>c.CategoryName" Title="Danh mục" />
    <PropertyColumn Property="c=>c.BrandName" Title="Thương hiệu" />
    <PropertyColumn Property="c=>c.Price" Title="Giá" Format="N0" />
    <PropertyColumn Property="c=>c.SalePrice" Title="Giá khuyến mãi" Format="N0" />
    <PropertyColumn Property="c=>c.LikeCount" Title="Lượt thích" />
    <PropertyColumn Property="c=>c.TotalQuantity" Title="Số lượng" />
    <ActionColumn Title="Tồn kho">
        @foreach (var inventory in context.Inventories)
        {
            <Tag Color="TagColor.Blue">Size@(inventory.SizeId): @inventory.Quantity</Tag>
        }
    </ActionColumn>
    <ActionColumn Title="Thao tác">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowInventoryModal(context)">
                    <Icon Type="appstore-add" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Xác nhận xóa?"
                            OkText="Có"
                            CancelText="Không"
                            OnConfirm="() => OnDelete(context.Id)">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="@("Tạo sản phẩm")"
       Visible="@_createModalVisible"
       OnOk="@OnCreateOk"
       OnCancel="@OnCreateCancel"
       Width="800">
    <Form Model="@_newProduct" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <Row>
            <Col Span="12">
            <FormItem Label="Tên sản phẩm">
                <Input @bind-Value="@_newProduct.Name" />
            </FormItem>
            <FormItem Label="Mô tả">
                <TextArea @bind-Value="@_newProduct.Description" />
            </FormItem>
            <FormItem Label="Danh mục">
                <Select TItem="string"
                        TItemValue="string"
                        @bind-Value="@_newProduct.CategoryId"
                        Placeholder="Chọn danh mục">
                    <SelectOptions>
                            @foreach (var category in _categories)
                            {
                            <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                            }
                    </SelectOptions>
                </Select>
            </FormItem>
            <FormItem Label="Thương hiệu">
                <Select TItem="string"
                        TItemValue="string"
                        @bind-Value="@_newProduct.BrandId"
                        Placeholder="Chọn thương hiệu">
                    <SelectOptions>
                            @foreach (var brand in _brands)
                            {
                            <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                            }
                    </SelectOptions>
                </Select>
            </FormItem>
            <FormItem Label="Giá">
                <AntDesign.InputNumber @bind-Value="@_newProduct.Price" Style="width: 100%" />
            </FormItem>
            <FormItem Label="Giá khuyến mãi">
                <AntDesign.InputNumber @bind-Value="@_newProduct.SalePrice" Style="width: 100%" />
            </FormItem>
            </Col>
            <Col Span="12">
            <FormItem Label="Ảnh chính">
                <InputFile id="createMainImageInput" OnChange="@OnCreateMainImageChange" hidden />
                <Upload FileList="@_createMainImageFileList">
                    <label class="ant-btn" for="createMainImageInput">
                        <Icon Type="@IconType.Outline.Upload" />
                            @if (_createMainImageLoading)
                            {
                            <Spin Size="@SpinSize.Small" Style="margin-left: 8px;" />
                            }
                            else
                            {
                            <span>Chọn ảnh chính</span>
                            }
                    </label>
                </Upload>
                    @if (!string.IsNullOrEmpty(_newProduct.MainImage))
                    {
                    <div style="margin-top: 10px;">
                        <Image Src="@_newProduct.MainImage" Style="width: 200px; height: 200px; object-fit: cover;" />
                    </div>
                    }
            </FormItem>
            <FormItem Label="Ảnh phụ">
                <InputFile id="createImagesInput" OnChange="@OnCreateImagesChange" hidden multiple />
                <Upload FileList="@_createImageFileList" Multiple>
                    <label class="ant-btn" for="createImagesInput">
                        <Icon Type="@IconType.Outline.Upload" />
                            @if (_createImagesLoading)
                            {
                            <Spin Size="@SpinSize.Small" Style="margin-left: 8px;" />
                            }
                            else
                            {
                            <span>Chọn ảnh phụ</span>
                            }
                    </label>
                </Upload>
                <Upload Drag>
                    <InputFile OnChange="@OnCreateImagesChange" style="position: absolute; width: 100%; height: 100%; opacity: 0; top: 0; left: 0; z-index: 2;" multiple />
                    <p class="ant-upload-drag-icon">
                        <Icon Type="@IconType.Outline.Inbox" />
                    </p>
                    <p class="ant-upload-text">
                            @if (_createImagesLoading)
                            {
                            <Spin Size="@SpinSize.Small" />
                            }
                            else
                            {
                            <span>Kéo thả ảnh vào đây để tải lên</span>
                            }
                    </p>
                    <p class="ant-upload-hint">
                        Hỗ trợ tải lên một hoặc nhiều ảnh. Chỉ chấp nhận file ảnh (.jpg, .jpeg, .png)
                    </p>
                </Upload>
                    @if (_newProduct.Images != null && _newProduct.Images.Any())
                    {
                    <div style="margin-top: 10px; display: flex; gap: 10px; flex-wrap: wrap;">
                        <ImagePreviewGroup>
                                @foreach (var image in _newProduct.Images)
                                {
                                <div style="position: relative;">
                                    <Image Src="@image" Style="width: 100px; height: 100px; object-fit: cover;" />
                                    <Button Type="@ButtonType.Primary"
                                            Danger
                                            Shape="@ButtonShape.Circle"
                                            Style="position: absolute; top: -8px; right: -8px; padding: 0; width: 20px; height: 20px; min-width: 20px;"
                                            OnClick="@(() => RemoveCreateImage(image))">
                                        <Icon Type="close" />
                                    </Button>
                                </div>
                                }
                        </ImagePreviewGroup>
                    </div>
                    }
            </FormItem>
            </Col>
        </Row>
    </Form>
</Modal>

<Modal Title="@("Cập nhật sản phẩm")"
       Visible="@_editModalVisible"
       OnOk="@OnEditOk"
       OnCancel="@OnEditCancel"
       Width="800">
    <Form Model="@_editProduct" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <Row>
            <Col Span="12">
            <FormItem Label="Tên sản phẩm">
                <Input @bind-Value="@_editProduct.Name" />
            </FormItem>
            <FormItem Label="Mô tả">
                <TextArea @bind-Value="@_editProduct.Description" />
            </FormItem>
            <FormItem Label="Danh mục">
                <Select TItem="string"
                        TItemValue="string"
                        @bind-Value="@_editProduct.CategoryId"
                        Placeholder="Chọn danh mục">
                    <SelectOptions>
                            @foreach (var category in _categories)
                            {
                            <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                            }
                    </SelectOptions>
                </Select>
            </FormItem>
            <FormItem Label="Thương hiệu">
                <Select TItem="string"
                        TItemValue="string"
                        @bind-Value="@_editProduct.BrandId"
                        Placeholder="Chọn thương hiệu">
                    <SelectOptions>
                            @foreach (var brand in _brands)
                            {
                            <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                            }
                    </SelectOptions>
                </Select>
            </FormItem>
            <FormItem Label="Giá">
                <AntDesign.InputNumber @bind-Value="@_editProduct.Price" Style="width: 100%" />
            </FormItem>
            <FormItem Label="Giá khuyến mãi">
                <AntDesign.InputNumber @bind-Value="@_editProduct.SalePrice" Style="width: 100%" />
            </FormItem>
            </Col>
            <Col Span="12">
            <FormItem Label="Ảnh chính">
                <InputFile id="editMainImageInput" OnChange="@OnEditMainImageChange" hidden />
                <Upload FileList="@_editMainImageFileList">
                    <label class="ant-btn" for="editMainImageInput">
                        <Icon Type="@IconType.Outline.Upload" />
                            @if (_editMainImageLoading)
                            {
                            <Spin Size="@SpinSize.Small" Style="margin-left: 8px;" />
                            }
                            else
                            {
                            <span>Chọn ảnh chính</span>
                            }
                    </label>
                </Upload>
                    @if (!string.IsNullOrEmpty(_editProduct.MainImage))
                    {
                    <div style="margin-top: 10px;">
                        <Image Src="@_editProduct.MainImage" Style="width: 200px; height: 200px; object-fit: cover;" />
                    </div>
                    }
            </FormItem>
            <FormItem Label="Ảnh phụ">
                <InputFile id="editImagesInput" OnChange="@OnEditImagesChange" hidden multiple />
                <Upload FileList="@_editImageFileList" Multiple>
                    <label class="ant-btn" for="editImagesInput">
                        <Icon Type="@IconType.Outline.Upload" />
                            @if (_editImagesLoading)
                            {
                            <Spin Size="@SpinSize.Small" Style="margin-left: 8px;" />
                            }
                            else
                            {
                            <span>Chọn ảnh phụ</span>
                            }
                    </label>
                </Upload>
                <Upload Drag>
                    <InputFile OnChange="@OnEditImagesChange" style="position: absolute; width: 100%; height: 100%; opacity: 0; top: 0; left: 0; z-index: 2;" multiple />
                    <p class="ant-upload-drag-icon">
                        <Icon Type="@IconType.Outline.Inbox" />
                    </p>
                    <p class="ant-upload-text">
                            @if (_editImagesLoading)
                            {
                            <Spin Size="@SpinSize.Small" />
                            }
                            else
                            {
                            <span>Kéo thả ảnh vào đây để tải lên</span>
                            }
                    </p>
                    <p class="ant-upload-hint">
                        Hỗ trợ tải lên một hoặc nhiều ảnh. Chỉ chấp nhận file ảnh (.jpg, .jpeg, .png)
                    </p>
                </Upload>
                    @if (_editProduct.Images != null && _editProduct.Images.Any())
                    {
                    <div style="margin-top: 10px; display: flex; gap: 10px; flex-wrap: wrap;">
                        <ImagePreviewGroup>
                                @foreach (var image in _editProduct.Images)
                                {
                                <div style="position: relative;">
                                    <Image Src="@image" Style="width: 100px; height: 100px; object-fit: cover;" />
                                    <Button Type="@ButtonType.Primary"
                                            Danger
                                            Shape="@ButtonShape.Circle"
                                            Style="position: absolute; top: -8px; right: -8px; padding: 0; width: 20px; height: 20px; min-width: 20px;"
                                            OnClick="@(() => RemoveEditImage(image))">
                                        <Icon Type="close" />
                                    </Button>
                                </div>
                                }
                        </ImagePreviewGroup>
                    </div>
                    }
            </FormItem>
            </Col>
        </Row>
    </Form>
</Modal>

<Modal Title="@("Lọc sản phẩm")"
       Visible="@_filterModalVisible"
       OnOk="@OnFilterOk"
       OnCancel="@OnFilterCancel"
       Width="600">
    <Form Model="@_filterModel" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên sản phẩm">
            <Input @bind-Value="@_filterModel.Name" />
        </FormItem>
        <FormItem Label="Danh mục">
            <Select TItem="string"
                    TItemValue="string"
                    @bind-Value="@_filterModel.CategoryId"
                    Placeholder="Chọn danh mục">
                <SelectOptions>
                    @foreach (var category in _categories)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@category.Id" Label="@category.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Thương hiệu">
            <Select TItem="string"
                    TItemValue="string"
                    @bind-Value="@_filterModel.BrandId"
                    Placeholder="Chọn thương hiệu">
                <SelectOptions>
                    @foreach (var brand in _brands)
                    {
                        <SelectOption TItem="string" TItemValue="string" Value="@brand.Id" Label="@brand.Name" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Giá từ">
            <AntDesign.InputNumber @bind-Value="@_filterModel.MinPrice" Style="width: 100%" />
        </FormItem>
        <FormItem Label="Giá đến">
            <AntDesign.InputNumber @bind-Value="@_filterModel.MaxPrice" Style="width: 100%" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Quản lý tồn kho")"
       Visible="@_inventoryModalVisible"
       OnOk="@OnInventoryOk"
       OnCancel="@OnInventoryCancel"
       Width="600">
    <Form Model="@_inventoryModel" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Sản phẩm">
            <Input @bind-Value="@_currentProduct.Name" Disabled="true" />
        </FormItem>
        <FormItem Label="Tồn kho theo size">
            <Space Direction="SpaceDirection.Vertical" Style="width: 100%">
                @foreach (var size in _sizes)
                {
                    <SpaceItem>
                        <Text>Size @size:</Text>
                        <AntDesign.InputNumber @bind-Value="@_inventoryModel[size]" Style="width: 100%" Min="0" />
                    </SpaceItem>
                }
            </Space>
        </FormItem>
    </Form>
</Modal>

@code {

    private IEnumerable<ProductDto> _data = [];
    private IEnumerable<string> _sizes = [];
    private ITable _table;
    private ProductDto _newProduct = new();
    private ProductDto _editProduct = new();
    private bool _loading = true;
    private string _searchText = "";
    private bool _createModalVisible = false;
    private bool _editModalVisible = false;
    private bool _filterModalVisible = false;
    private PaginationData<ProductDto> _paginationData = new();
    private FilterModel _filterModel = new();
    private Dictionary<string, string> _currentFilter = new();
    private List<CategoryDto> _categories = new();
    private List<BrandDto> _brands = new();

    private int pageSize = 5;
    private int pageIndex = 1;
    private int totalItems = 0;

    private IBrowserFile _createMainImageFile;
    private List<IBrowserFile> _createImageFiles = new();
    private IBrowserFile _editMainImageFile;
    private List<IBrowserFile> _editImageFiles = new();

    private List<UploadFileItem> _createMainImageFileList = new();
    private List<UploadFileItem> _createImageFileList = new();
    private List<UploadFileItem> _editMainImageFileList = new();
    private List<UploadFileItem> _editImageFileList = new();

    private bool _createMainImageLoading = false;
    private bool _createImagesLoading = false;
    private bool _editMainImageLoading = false;
    private bool _editImagesLoading = false;

    private bool _inventoryModalVisible = false;
    private ProductDto _currentProduct = new();
    private Dictionary<string, int> _inventoryModel = new();

    private class FilterModel
    {
        public string Name { get; set; } = "";
        public string? CategoryId { get; set; }
        public string? BrandId { get; set; }
        public double? MinPrice { get; set; }
        public double? MaxPrice { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadCategories();
        await LoadBrands();

        _sizes = (await sizeService.GetAll()).Select(p => p.Id).ToList();
    }


    private async Task LoadCategories()
    {
        // await Task.Delay(100);
        try
        {
            var result = await categoryService.GetAll();
            _categories = result.ToList();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải danh mục: {ex.Message}");
        }
    }

    private async Task LoadBrands()
    {
        // await Task.Delay(100);
        try
        {
            var result = await brandService.GetAll();
            _brands = result.ToList();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải thương hiệu: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        _loading = true;

        await Task.Delay(100);
        try
        {
            if (_currentFilter.Any())
            {
                _paginationData = await productService.FilterAndPagin(pageIndex, pageSize, _currentFilter);
            }
            else
            {
                _paginationData = await productService.GetPagination(pageIndex, pageSize);
            }
            _data = _paginationData.Data;
            totalItems = _paginationData.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        if (!string.IsNullOrEmpty(value))
        {
            _currentFilter["name"] = value;
        }
        else
        {
            _currentFilter.Remove("name");
        }
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private void ShowFilterModal()
    {
        _filterModel = new FilterModel
            {
                Name = _currentFilter.GetValueOrDefault("name", ""),
                CategoryId = _currentFilter.GetValueOrDefault("categoryId"),
                BrandId = _currentFilter.GetValueOrDefault("brandId"),
                MinPrice = _currentFilter.ContainsKey("minPrice") ? double.Parse(_currentFilter["minPrice"]) : null,
                MaxPrice = _currentFilter.ContainsKey("maxPrice") ? double.Parse(_currentFilter["maxPrice"]) : null
            };
        _filterModalVisible = true;
    }

    private async Task OnFilterOk()
    {
        _currentFilter.Clear();
        if (!string.IsNullOrEmpty(_filterModel.Name))
            _currentFilter["name"] = _filterModel.Name;
        if (!string.IsNullOrEmpty(_filterModel.CategoryId))
            _currentFilter["categoryId"] = _filterModel.CategoryId;
        if (!string.IsNullOrEmpty(_filterModel.BrandId))
            _currentFilter["brandId"] = _filterModel.BrandId;
        if (_filterModel.MinPrice.HasValue)
            _currentFilter["minPrice"] = _filterModel.MinPrice.Value.ToString();
        if (_filterModel.MaxPrice.HasValue)
            _currentFilter["maxPrice"] = _filterModel.MaxPrice.Value.ToString();

        pageIndex = 1;
        await LoadData();
        _filterModalVisible = false;
    }

    private void OnFilterCancel()
    {
        _filterModalVisible = false;
    }

    private void ShowCreateModal()
    {
        _newProduct = new ProductDto();
        _createMainImageFile = null;
        _createImageFiles = new();
        _createMainImageFileList = new();
        _createImageFileList = new();
        _createModalVisible = true;
    }

    private void ShowEditModal(ProductDto product)
    {
        _editProduct = new ProductDto
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                SalePrice = product.SalePrice,
                CategoryId = product.CategoryId,
                BrandId = product.BrandId,
                MainImage = product.MainImage,
                Images = product.Images?.ToList() ?? new List<string>()
            };
        _editMainImageFile = null;
        _editImageFiles = new();
        _editMainImageFileList = new();
        _editImageFileList = new();
        _editModalVisible = true;
    }
    private void ShowInventoryModal(ProductDto product)
    {
        _currentProduct = product;
        _inventoryModel = new Dictionary<string, int>();

        // Initialize inventory model with existing quantities
        foreach (var size in _sizes)
        {
            var existingInventory = product.Inventories?.FirstOrDefault(i => i.SizeId == size);
            _inventoryModel[size] = existingInventory?.Quantity ?? 0;
        }

        _inventoryModalVisible = true;
    }
    private async Task OnCreateOk()
    {
        try
        {
            await productService.Create(_newProduct);
            MessageService.Success("Thêm sản phẩm thành công!");
            _createModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi thêm sản phẩm: {ex.Message}");
        }
    }

    private void OnCreateCancel()
    {
        _createModalVisible = false;
    }

    private async Task OnEditOk()
    {
        try
        {
            await productService.Update(_editProduct);
            MessageService.Success("Cập nhật sản phẩm thành công!");
            _editModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật sản phẩm: {ex.Message}");
        }
    }

    private void OnEditCancel()
    {
        _editModalVisible = false;
    }

    private async Task OnDelete(string id)
    {
        try
        {
            await productService.Delete(id);
            MessageService.Success("Xóa sản phẩm thành công!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }

    private async Task OnTableChange(QueryModel<ProductDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private async Task ClearFilters()
    {
        _currentFilter.Clear();
        _searchText = "";
        _filterModel = new FilterModel();
        pageIndex = 1;
        await LoadData();
        MessageService.Success("Đã xóa bộ lọc!");
    }

    private async Task OnCreateMainImageChange(InputFileChangeEventArgs e)
    {
        try
        {
            _createMainImageLoading = true;
            _createMainImageFile = e.File;
            if (_createMainImageFile != null)
            {
                _newProduct.MainImage = await imgurService.UploadImageAsync(_createMainImageFile);
                _createMainImageFileList = new List<UploadFileItem> { new UploadFileItem { FileName = _createMainImageFile.Name, Size = _createMainImageFile.Size } };
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải ảnh lên: {ex.Message}");
        }
        finally
        {
            _createMainImageLoading = false;
        }
    }

    private async Task OnCreateImagesChange(InputFileChangeEventArgs e)
    {
        try
        {
            _createImagesLoading = true;
            var newFiles = e.GetMultipleFiles().ToList();
            if (newFiles.Any())
            {
                var newImageUrls = await imgurService.UploadImagesAsync(newFiles);
                _newProduct.Images ??= new List<string>();
                _newProduct.Images.AddRange(newImageUrls);

                _createImageFiles.AddRange(newFiles);
                _createImageFileList.AddRange(newFiles.Select(file => new UploadFileItem { FileName = file.Name, Size = file.Size }));
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải ảnh lên: {ex.Message}");
        }
        finally
        {
            _createImagesLoading = false;
        }
    }

    private async Task OnEditMainImageChange(InputFileChangeEventArgs e)
    {
        try
        {
            _editMainImageLoading = true;
            _editMainImageFile = e.File;
            if (_editMainImageFile != null)
            {
                _editProduct.MainImage = await imgurService.UploadImageAsync(_editMainImageFile);
                _editMainImageFileList = new List<UploadFileItem> { new UploadFileItem { FileName = _editMainImageFile.Name, Size = _editMainImageFile.Size } };
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải ảnh lên: {ex.Message}");
        }
        finally
        {
            _editMainImageLoading = false;
        }
    }

    private async Task OnEditImagesChange(InputFileChangeEventArgs e)
    {
        try
        {
            _editImagesLoading = true;
            var newFiles = e.GetMultipleFiles().ToList();
            if (newFiles.Any())
            {
                var newImageUrls = await imgurService.UploadImagesAsync(newFiles);
                _editProduct.Images ??= new List<string>();
                _editProduct.Images.AddRange(newImageUrls);

                _editImageFiles.AddRange(newFiles);
                _editImageFileList.AddRange(newFiles.Select(file => new UploadFileItem { FileName = file.Name, Size = file.Size }));
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải ảnh lên: {ex.Message}");
        }
        finally
        {
            _editImagesLoading = false;
        }
    }

    private void RemoveCreateImage(string imageUrl)
    {
        if (_newProduct.Images != null)
        {
            _newProduct.Images.Remove(imageUrl);
            var index = _createImageFileList.FindIndex(f => f.FileName == imageUrl);
            if (index != -1)
            {
                _createImageFileList.RemoveAt(index);
                _createImageFiles.RemoveAt(index);
            }
        }
    }

    private void RemoveEditImage(string imageUrl)
    {
        if (_editProduct.Images != null)
        {
            _editProduct.Images.Remove(imageUrl);
            var index = _editImageFileList.FindIndex(f => f.FileName == imageUrl);
            if (index != -1)
            {
                _editImageFileList.RemoveAt(index);
                _editImageFiles.RemoveAt(index);
            }
        }
    }

    private async Task OnInventoryOk()
    {
        try
        {
            var inventories = _inventoryModel
                .Where(kvp => 
                    // Include if quantity > 0 and size doesn't exist in current inventory
                    (kvp.Value > 0 && !_currentProduct.Inventories.Any(i => i.SizeId == kvp.Key)) ||
                    // Or if size exists in current inventory (update regardless of quantity)
                    _currentProduct.Inventories.Any(i => i.SizeId == kvp.Key))
                .Select(kvp => new InventoryDto
                {
                    ProductId = _currentProduct.Id,
                    SizeId = kvp.Key,
                    Quantity = kvp.Value
                });

            await productService.Stock(_currentProduct.Id, inventories);
            MessageService.Success("Cập nhật tồn kho thành công!");
            _inventoryModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật tồn kho: {ex.Message}");
        }
    }

    private void OnInventoryCancel()
    {
        _inventoryModalVisible = false;
    }
}
