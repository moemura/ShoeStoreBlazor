@page "/management/brand"
@using AntDesign.TableModels
@using WebApp.Models
@using WebApp.Models.DTOs
@inject IBrandService brandService
@inject IFileService fileService
@inject MessageService MessageService

<PageTitle>Quản lý thương hiệu</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Appstore" />
        <span>Quản lý thương hiệu</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<Space>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="() => ShowCreateModal()">
            <Icon Type="plus" Theme="IconThemeType.Outline" />
            Thêm mới
        </Button>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@_searchText"
               Placeholder="Tìm kiếm thương hiệu..."
               Style="width: 200px"
               OnChange="@(async (string value) => await OnSearch(value))" />
    </SpaceItem>
    <SpaceItem>
        <Select TItem="int"
                TItemValue="int"
                Style="width: 120px"
                @bind-Value="@pageSize"
                OnChange="@(async (int value) => await OnPageSizeChange(value))">
            <SelectOptions>
                <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / trang" />
                <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / trang" />
            </SelectOptions>
        </Select>
    </SpaceItem>
</Space>

<p />

<Table @ref=_table
       TItem="BrandDto"
       DataSource="@_data"
       Total="@totalItems"
       PageSize="@pageSize"
       PageIndex="@pageIndex"
       OnChange="@OnTableChange"
       Loading="_loading">
    <PropertyColumn TItem="BrandDto" TProp="string" Width="80px">
        <Avatar Src="@(fileService.GetFileUrl(context.Logo, "brands"))" />
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Name" Title="Tên thương hiệu" />
    <PropertyColumn Property="c=>c.Description" Title="Mô tả" />
    <ActionColumn Title="Thao tác">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Xác nhận xóa?"
                            OkText="Có"
                            CancelText="Không"
                            OnConfirm="() => OnDelete(context.Id)">
                    <Button Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="@("Tạo thương hiệu")"
       Visible="@_createModalVisible"
       OnOk="@OnCreateOk"
       OnCancel="@OnCreateCancel"
       Width="600">
    <Form Model="@_newBrand" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên thương hiệu">
            <Input @bind-Value="@_newBrand.Name" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="@_newBrand.Description" />
        </FormItem>
        <FormItem Label="Logo">
            <InputFile OnChange="@OnCreateLogoChange" Accept=".jpg,.jpeg,.png" />
            @if (!string.IsNullOrEmpty(_newBrand.Logo))
            {
                <div style="margin-top: 10px;">
                    <Image Src="@fileService.GetFileUrl(_newBrand.Logo, "brands")" Style="width: 200px; height: 200px; object-fit: cover;" />
                </div>
            }
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Chỉnh sửa thương hiệu")"
       Visible="@_editModalVisible"
       OnOk="@OnEditOk"
       OnCancel="@OnEditCancel"
       Width="600">
    <Form Model="@_editBrand" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên thương hiệu">
            <Input @bind-Value="@_editBrand.Name" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="@_editBrand.Description" />
        </FormItem>
        <FormItem Label="Logo">
            <InputFile OnChange="@OnEditLogoChange" Accept=".jpg,.jpeg,.png" />
            @if (!string.IsNullOrEmpty(_editBrand.Logo))
            {
                <div style="margin-top: 10px;">
                    <Image Src="@fileService.GetFileUrl(_editBrand.Logo, "brands")" Style="width: 200px; height: 200px; object-fit: cover;" />
                </div>
            }
        </FormItem>
    </Form>
</Modal>

@code {
    private IEnumerable<BrandDto> _data = [];
    private ITable _table;
    private BrandDto _newBrand = new();
    private BrandDto _editBrand = new();
    private bool _loading = true;
    private string _searchText = "";
    private bool _createModalVisible = false;
    private bool _editModalVisible = false;
    private PaginationData<BrandDto> _paginationData = new();
    private IBrowserFile _createLogoFile;
    private IBrowserFile _editLogoFile;

    private int pageSize = 5;
    private int pageIndex = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;

        await Task.Delay(100);
        try
        {
            _paginationData = await brandService.GetPagination(pageIndex, pageSize);
            _data = _paginationData.Data;
            totalItems = _paginationData.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnTableChange(QueryModel<BrandDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private void ShowCreateModal()
    {
        _newBrand = new BrandDto();
        _createModalVisible = true;
    }

    private void ShowEditModal(BrandDto brand)
    {
        _editBrand = new BrandDto
            {
                Id = brand.Id,
                Name = brand.Name,
                Description = brand.Description,
                Logo = brand.Logo
            };
        _editModalVisible = true;
    }

    private async Task OnCreateLogoChange(InputFileChangeEventArgs e)
    {
        _createLogoFile = e.File;
        if (_createLogoFile != null)
        {
            _newBrand.Logo = await fileService.SaveFileAsync(_createLogoFile, "brands");
        }
    }

    private async Task OnEditLogoChange(InputFileChangeEventArgs e)
    {
        _editLogoFile = e.File;
        if (_editLogoFile != null)
        {
            _editBrand.Logo = await fileService.SaveFileAsync(_editLogoFile, "brands");
        }
    }

    private async Task OnCreateOk()
    {
        try
        {
            await brandService.Create(_newBrand);
            MessageService.Success("Thêm thương hiệu thành công!");
            _createModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi thêm thương hiệu: {ex.Message}");
        }
    }

    private void OnCreateCancel()
    {
        _createModalVisible = false;
    }

    private async Task OnEditOk()
    {
        try
        {
            await brandService.Update(_editBrand);
            MessageService.Success("Cập nhật thương hiệu thành công!");
            _editModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật thương hiệu: {ex.Message}");
        }
    }

    private void OnEditCancel()
    {
        _editModalVisible = false;
    }

    private async Task OnDelete(string id)
    {
        try
        {
            await brandService.Delete(id);
            MessageService.Success("Xóa thương hiệu thành công!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi xóa thương hiệu: {ex.Message}");
        }
    }
} 