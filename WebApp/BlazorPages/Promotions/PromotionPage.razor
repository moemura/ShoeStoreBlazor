@page "/admin/promotions"
@using AntDesign.TableModels
@using WebApp.Models
@using WebApp.Models.DTOs
@using WebApp.Services.Promotions
@using WebApp.Models.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "RequireAdminRole")]
@inject IPromotionService PromotionService
@inject MessageService MessageService

<PageTitle>Quản lý Khuyến mãi</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Gift" />
        <span>Quản lý Khuyến mãi</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<!-- Search and Controls Row -->
<AntDesign.Row Gutter="16" Style="margin-bottom: 16px;" Class="search-controls-row">
    <AntDesign.Col Xs="24" Sm="14" Md="16" Lg="18">
        <Space Style="width: 100%;">
            <SpaceItem>
                <Input @bind-Value="@_searchText"
                       Placeholder="Tìm theo tên khuyến mãi..."
                       OnChange="@(async (string value) => await OnSearch(value))"
                       Style="width: 300px;">
                    <Suffix>
                        <Icon Type="search" />
                    </Suffix>
                </Input>
            </SpaceItem>
            <SpaceItem>
                @if (HasActiveFilters())
                {
                    <Button Type="@ButtonType.Default" OnClick="ClearFilters">
                        <Icon Type="clear" />
                        <span class="hidden-xs">Xóa lọc</span>
                    </Button>
                }
            </SpaceItem>
        </Space>
    </AntDesign.Col>

    <AntDesign.Col Xs="24" Sm="10" Md="8" Lg="6" Class="d-flex justify-content-end">
        <Space Style="width: 100%;" Class="controls-right">
            <SpaceItem>
                <Button Type="@ButtonType.Default" OnClick="@ReloadData" Loading="_loading">
                    <Icon Type="reload" />
                    <span class="hidden-xs">Tải lại</span>
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="ShowCreateModal">
                    <Icon Type="plus" />
                    <span class="hidden-xs">Tạo Khuyến mãi</span>
                </Button>
            </SpaceItem>
        </Space>
    </AntDesign.Col>
</AntDesign.Row>

<!-- Inline Filters (Desktop) -->
<Card Class="desktop-filters" Style="margin-bottom: 16px;">
    <AntDesign.Row Gutter="16">
        <AntDesign.Col Span="8">
            <Text Strong>Loại khuyến mãi:</Text>
            <Select TItem="PromotionType?"
                    TItemValue="PromotionType?"
                    @bind-Value="@_filterType"
                    Placeholder="Tất cả loại"
                    AllowClear="true"
                    Style="width: 100%; margin-top: 4px;"
                    OnSelectedItemChanged="@(async (PromotionType? value) => await OnFilterChange())">
                <SelectOptions>
                    <SelectOption TItem="PromotionType?" TItemValue="PromotionType?" Value="PromotionType.Percentage" Label="Phần trăm" />
                    <SelectOption TItem="PromotionType?" TItemValue="PromotionType?" Value="PromotionType.FixedAmount" Label="Số tiền cố định" />
                </SelectOptions>
            </Select>
        </AntDesign.Col>

        <AntDesign.Col Span="8">
            <Text Strong>Trạng thái:</Text>
            <Select TItem="bool?"
                    TItemValue="bool?"
                    @bind-Value="@_filterActive"
                    Placeholder="Tất cả trạng thái"
                    AllowClear="true"
                    Style="width: 100%; margin-top: 4px;"
                    OnSelectedItemChanged="@(async (bool? value) => await OnFilterChange())">
                <SelectOptions>
                    <SelectOption TItem="bool?" TItemValue="bool?" Value="true" Label="Hoạt động" />
                    <SelectOption TItem="bool?" TItemValue="bool?" Value="false" Label="Không hoạt động" />
                </SelectOptions>
            </Select>
        </AntDesign.Col>

        <AntDesign.Col Span="8">
            <Text Strong>Mức độ ưu tiên:</Text>
            <div style="margin-top: 4px;">
                <AntDesign.Row Gutter="8">
                    <AntDesign.Col Span="12">
                        <AntDesign.InputNumber @bind-Value="@_minPriority"
                                               Placeholder="Từ"
                                               Min="1"
                                               Style="width: 100%"
                                               OnChange="@(async (int? value) => await OnFilterChange())" />
                    </AntDesign.Col>
                    <AntDesign.Col Span="12">
                        <AntDesign.InputNumber @bind-Value="@_maxPriority"
                                               Placeholder="Đến"
                                               Min="1"
                                               Style="width: 100%"
                                               OnChange="@(async (int? value) => await OnFilterChange())" />
                    </AntDesign.Col>
                </AntDesign.Row>
            </div>
        </AntDesign.Col>
    </AntDesign.Row>
</Card>

<Table @ref=_table
       TItem="PromotionDto"
       DataSource="@_filteredData"
       Loading="_loading">
    <PropertyColumn Property="c => c.Name" Title="Tên khuyến mãi">
        <div>
            <Text Strong>@context.Name</Text>
            @if (!string.IsNullOrEmpty(context.Description))
            {
                <br />
                <AntDesign.Text Type="@TextElementType.Secondary" Style="font-size: 12px;">@context.Description</AntDesign.Text>
            }
        </div>
    </PropertyColumn>
    <PropertyColumn Property="c => c.Type" Title="Loại">
        <Tag Color="@(context.Type == "Percentage" ? "blue" : "green")">
            @(context.Type == "Percentage" ? "Phần trăm" : "Số tiền cố định")
        </Tag>
    </PropertyColumn>
    <PropertyColumn Property="c => c.DiscountValue" Title="Giá trị">
        @if (context.Type == "Percentage")
        {
            <div>
                <Text Strong Style="color: #1890ff;">@context.DiscountValue%</Text>
                @if (context.MaxDiscountAmount.HasValue)
                {
                    <br />
                    <AntDesign.Text Type="@TextElementType.Secondary" Style="font-size: 12px;">
                        Tối đa: @context.MaxDiscountAmount.Value.ToString("N0")đ
                    </AntDesign.Text>
                }
            </div>
        }
        else
        {
            <AntDesign.Text Strong Style="color: #52c41a;">@context.DiscountValue.ToString("N0")đ</AntDesign.Text>
        }
    </PropertyColumn>
    <PropertyColumn Property="c => c.Priority" Title="Ưu tiên">
        <Tag Color="@GetPriorityColor(context.Priority)">
            @context.Priority
        </Tag>
    </PropertyColumn>
    <PropertyColumn Property="c => c.StartDate" Title="Thời gian">
        <div style="font-size: 12px;">
            <div>Từ: @context.StartDate.ToString("dd/MM/yyyy")</div>
            <div>Đến: @context.EndDate.ToString("dd/MM/yyyy")</div>
        </div>
    </PropertyColumn>
    <PropertyColumn Property="c => c.IsActive" Title="Trạng thái">
        @{
            var (color, text) = GetPromotionStatusInfo(context);
        }
        <Badge Status="@color" Text="@text" />
    </PropertyColumn>
    <ActionColumn Title="Thao tác">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" OnClick="() => ShowDetailModal(context)">
                    <Icon Type="eye" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Default" Size="@ButtonSize.Small" OnClick="() => ShowEditModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@(context.IsActive ? ButtonType.Default : ButtonType.Primary)" 
                        Size="@ButtonSize.Small" 
                        OnClick="() => ToggleActiveStatus(context)">
                    <Icon Type="@(context.IsActive ? "pause" : "play-circle")" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Bạn có chắc chắn muốn xóa khuyến mãi này?"
                            OnConfirm="@(() => DeletePromotion(context.Id))"
                            OkText="Xóa"
                            CancelText="Hủy">
                    <Button Type="@ButtonType.Default" Size="@ButtonSize.Small" Danger>
                        <Icon Type="delete" />
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<!-- Create/Edit Modal -->
<Modal Title="@(editingPromotion == null ? "Tạo Khuyến mãi Mới" : "Chỉnh Sửa Khuyến mãi")"
       Visible="@_createEditModalVisible"
       OnOk="@OnSavePromotion"
       OnCancel="@OnCreateEditCancel"
       Width="800"
       ConfirmLoading="@_isSubmitting">
    @if (!string.IsNullOrEmpty(_modalError))
    {
        <Alert Type="@AlertType.Error" Message="@_modalError" Style="margin-bottom: 16px;" />
    }

    <Form Model="@_promotionForm" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <AntDesign.Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Tên khuyến mãi" Required>
                    <Input @bind-Value="@_promotionForm.Name" 
                           Placeholder="Ví dụ: Khuyến mãi mùa hè" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Loại khuyến mãi" Required>
                    <Select TItem="PromotionType"
                            TItemValue="PromotionType"
                            @bind-Value="@_promotionForm.Type">
                        <SelectOptions>
                            <SelectOption TItem="PromotionType" TItemValue="PromotionType" Value="PromotionType.Percentage" Label="Phần trăm" />
                            <SelectOption TItem="PromotionType" TItemValue="PromotionType" Value="PromotionType.FixedAmount" Label="Số tiền cố định" />
                        </SelectOptions>
                    </Select>
                </FormItem>
            </AntDesign.Col>
        </AntDesign.Row>

        <AntDesign.Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="@(_promotionForm.Type == PromotionType.Percentage ? "Phần trăm giảm giá" : "Số tiền giảm (VNĐ)")" Required>
                    <AntDesign.InputNumber @bind-Value="@_promotionForm.DiscountValue"
                                           Min="0"
                                           Max="@(_promotionForm.Type == PromotionType.Percentage ? 100 : 999999999)"
                                           Step="@(_promotionForm.Type == PromotionType.Percentage ? 0.1 : 1000)"
                                           Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Mức độ ưu tiên" Required>
                    <AntDesign.InputNumber @bind-Value="@_promotionForm.Priority"
                                           Min="1"
                                           Max="100"
                                           Step="1"
                                           Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
        </AntDesign.Row>

        @if (_promotionForm.Type == PromotionType.Percentage)
        {
            <AntDesign.Row Gutter="16">
                <AntDesign.Col Span="12">
                    <FormItem Label="Số tiền giảm tối đa (VNĐ)">
                        <AntDesign.InputNumber @bind-Value="@_promotionForm.MaxDiscountAmount"
                                               Min="0"
                                               Step="1000"
                                               Style="width: 100%" />
                    </FormItem>
                </AntDesign.Col>
            </AntDesign.Row>
        }

        <AntDesign.Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Ngày bắt đầu" Required>
                    <DatePicker @bind-Value="@_promotionForm.StartDate"
                                Format="dd/MM/yyyy HH:mm"
                                ShowTime="true"
                                Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Ngày kết thúc" Required>
                    <DatePicker @bind-Value="@_promotionForm.EndDate"
                                Format="dd/MM/yyyy HH:mm"
                                ShowTime="true"
                                Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
        </AntDesign.Row>

        <FormItem Label="Mô tả">
            <TextArea @bind-Value="@_promotionForm.Description"
                      Rows="3"
                      Placeholder="Mô tả ngắn về khuyến mãi..." />
        </FormItem>

        <FormItem Label="Trạng thái">
            <Checkbox @bind-Value="_promotionForm.IsActive">Kích hoạt khuyến mãi</Checkbox>
        </FormItem>
    </Form>
</Modal>

<!-- Detail Modal -->
<Modal Title="@("Chi tiết Khuyến mãi: " + (_currentDetail?.Name ?? ""))"
       Visible="@_detailModalVisible"
       OnCancel="@OnDetailCancel"
       Width="800"
       Footer="null">
    @if (_currentDetail != null)
    {
        <Descriptions Bordered="true" Column="2">
            <DescriptionsItem Title="Tên khuyến mãi" Span="2">
                <Text Strong>@_currentDetail.Name</Text>
            </DescriptionsItem>
            <DescriptionsItem Title="Mô tả" Span="2">
                @(_currentDetail.Description ?? "Không có mô tả")
            </DescriptionsItem>
            <DescriptionsItem Title="Loại khuyến mãi">
                <Tag Color="@(_currentDetail.Type == "Percentage" ? "blue" : "green")">
                    @(_currentDetail.Type == "Percentage" ? "Phần trăm" : "Số tiền cố định")
                </Tag>
            </DescriptionsItem>
            <DescriptionsItem Title="Giá trị">
                @if (_currentDetail.Type == "Percentage")
                {
                    <AntDesign.Text Strong Style="color: #1890ff;">@_currentDetail.DiscountValue%</AntDesign.Text>
                    @if (_currentDetail.MaxDiscountAmount.HasValue)
                    {
                        <br />
                        <AntDesign.Text Type="@TextElementType.Secondary">
                            Tối đa: @_currentDetail.MaxDiscountAmount.Value.ToString("N0")đ
                        </AntDesign.Text>
                    }
                }
                else
                {
                    <AntDesign.Text Strong Style="color: #52c41a;">@_currentDetail.DiscountValue.ToString("N0")đ</AntDesign.Text>
                }
            </DescriptionsItem>
            <DescriptionsItem Title="Mức độ ưu tiên">
                <Tag Color="@GetPriorityColor(_currentDetail.Priority)">
                    @_currentDetail.Priority
                </Tag>
            </DescriptionsItem>
            <DescriptionsItem Title="Thời gian bắt đầu">
                @_currentDetail.StartDate.ToString("dd/MM/yyyy HH:mm")
            </DescriptionsItem>
            <DescriptionsItem Title="Thời gian kết thúc">
                @_currentDetail.EndDate.ToString("dd/MM/yyyy HH:mm")
            </DescriptionsItem>
            <DescriptionsItem Title="Trạng thái">
                @{
                    var (color, text) = GetPromotionStatusInfo(_currentDetail);
                }
                <Badge Status="@color" Text="@text" />
            </DescriptionsItem>
            <DescriptionsItem Title="Ngày tạo">
                @_currentDetail.CreatedAt.ToString("dd/MM/yyyy HH:mm")
            </DescriptionsItem>
            <DescriptionsItem Title="Cập nhật cuối">
                @_currentDetail.UpdatedAt?.ToString("dd/MM/yyyy HH:mm")
            </DescriptionsItem>
        </Descriptions>
    }
</Modal>

@code {
    private IEnumerable<PromotionDto> _data = [];
    private IEnumerable<PromotionDto> _filteredData = [];
    private ITable _table = default!;
    private bool _loading = true;
    private string _searchText = "";
    private bool _createEditModalVisible = false;
    private bool _detailModalVisible = false;
    private PromotionDto? editingPromotion = null;
    private PromotionDto? _currentDetail = null;
    private string _modalError = "";
    private bool _isSubmitting = false;

    // Filter variables
    private PromotionType? _filterType = null;
    private bool? _filterActive = null;
    private int? _minPriority = null;
    private int? _maxPriority = null;

    // Form model
    private PromotionFormModel _promotionForm = new();

    private class PromotionFormModel
    {
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public PromotionType Type { get; set; } = PromotionType.Percentage;
        public double DiscountValue { get; set; }
        public double? MaxDiscountAmount { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Priority { get; set; } = 1;
        public bool IsActive { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task ReloadData()
    {
        await LoadData();
        MessageService.Success("Đã tải lại dữ liệu!");
    }

    private async Task OnFilterChange()
    {
        await Task.Delay(300); // Debounce
        ApplyFilters();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(_searchText) ||
               _filterType.HasValue ||
               _filterActive.HasValue ||
               _minPriority.HasValue ||
               _maxPriority.HasValue;
    }

    private async Task LoadData()
    {
        _loading = true;
        await Task.Delay(100);

        try
        {
            var result = await PromotionService.GetAllAsync();
            _data = result;
            ApplyFilters();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
            _data = [];
            _filteredData = [];
        }
        finally
        {
            _loading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = _data.AsEnumerable();

        if (!string.IsNullOrEmpty(_searchText))
        {
            filtered = filtered.Where(x => x.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }

        if (_filterType.HasValue)
        {
            var typeString = _filterType.Value.ToString();
            filtered = filtered.Where(x => x.Type == typeString);
        }

        if (_filterActive.HasValue)
        {
            filtered = filtered.Where(x => x.IsActive == _filterActive.Value);
        }

        if (_minPriority.HasValue)
        {
            filtered = filtered.Where(x => x.Priority >= _minPriority.Value);
        }

        if (_maxPriority.HasValue)
        {
            filtered = filtered.Where(x => x.Priority <= _maxPriority.Value);
        }

        _filteredData = filtered.ToList();
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        await OnFilterChange();
    }

    private async Task ClearFilters()
    {
        _searchText = "";
        _filterType = null;
        _filterActive = null;
        _minPriority = null;
        _maxPriority = null;

        ApplyFilters();
        MessageService.Success("Đã xóa bộ lọc!");
    }

    private void ShowCreateModal()
    {
        editingPromotion = null;
        _promotionForm = new PromotionFormModel
        {
            Type = PromotionType.Percentage,
            IsActive = true,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(30),
            Priority = 1
        };
        _modalError = "";
        _createEditModalVisible = true;
    }

    private void ShowEditModal(PromotionDto promotion)
    {
        editingPromotion = promotion;
        _promotionForm = new PromotionFormModel
        {
            Name = promotion.Name,
            Description = promotion.Description,
            Type = Enum.Parse<PromotionType>(promotion.Type),
            DiscountValue = promotion.DiscountValue,
            MaxDiscountAmount = promotion.MaxDiscountAmount,
            StartDate = promotion.StartDate,
            EndDate = promotion.EndDate,
            Priority = promotion.Priority,
            IsActive = promotion.IsActive
        };
        _modalError = "";
        _createEditModalVisible = true;
    }

    private void ShowDetailModal(PromotionDto promotion)
    {
        _currentDetail = promotion;
        _detailModalVisible = true;
    }

    private async Task OnSavePromotion()
    {
        if (_isSubmitting) return;

        _modalError = "";
        _isSubmitting = true;

        try
        {
            if (editingPromotion == null)
            {
                // Create new promotion - this would need actual implementation
                MessageService.Info("Chức năng tạo mới đang được phát triển");
            }
            else
            {
                // Update existing promotion - this would need actual implementation
                MessageService.Info("Chức năng cập nhật đang được phát triển");
            }

            _createEditModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            _modalError = ex.Message;
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void OnCreateEditCancel()
    {
        _createEditModalVisible = false;
        editingPromotion = null;
        _modalError = "";
    }

    private void OnDetailCancel()
    {
        _detailModalVisible = false;
        _currentDetail = null;
    }

    private async Task DeletePromotion(string id)
    {
        try
        {
            await PromotionService.DeleteAsync(id);
            await LoadData();
            MessageService.Success("Xóa khuyến mãi thành công!");
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi xóa khuyến mãi: {ex.Message}");
        }
    }

    private async Task ToggleActiveStatus(PromotionDto promotion)
    {
        try
        {
            // This would need actual implementation
            MessageService.Info("Chức năng thay đổi trạng thái đang được phát triển");
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi thay đổi trạng thái: {ex.Message}");
        }
    }

    private (BadgeStatus color, string text) GetPromotionStatusInfo(PromotionDto promotion)
    {
        if (promotion.IsActive && promotion.StartDate <= DateTime.Now && promotion.EndDate >= DateTime.Now)
        {
            return (BadgeStatus.Success, "Hoạt động");
        }
        else if (!promotion.IsActive)
        {
            return (BadgeStatus.Default, "Tạm dừng");
        }
        else if (promotion.StartDate > DateTime.Now)
        {
            return (BadgeStatus.Warning, "Chưa bắt đầu");
        }
        else
        {
            return (BadgeStatus.Error, "Hết hạn");
        }
    }

    private string GetPriorityColor(int priority)
    {
        return priority switch
        {
            >= 8 => "red",
            >= 5 => "orange",
            >= 3 => "blue",
            _ => "green"
        };
    }
}

<style>
    /* Search Controls Row */
    .search-controls-row {
        width: 100%;
    }

    .controls-right {
        justify-content: flex-end;
        width: 100%;
    }

    /* Responsive Filter Styles */
    .desktop-filters {
        display: block;
    }

    .hidden-xs {
        display: inline;
    }

    .d-flex {
        display: flex;
    }

    .justify-content-end {
        justify-content: flex-end;
    }

    /* Mobile Responsive */
    @@media (max-width: 575px) {
        .hidden-xs {
            display: none;
        }

        .ant-col {
            margin-bottom: 8px;
        }

        .d-flex {
            justify-content: center;
        }

        .controls-right {
            justify-content: center;
        }
    }

    /* Improve table responsive */
    .ant-table-wrapper {
        overflow-x: auto;
    }

    /* Better spacing for controls */
    .ant-space-item {
        display: flex;
        align-items: center;
    }

    /* Button hover effects */
    .ant-btn:hover {
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }
</style> 