@page "/admin/promotions"
@using WebApp.Models.DTOs
@using WebApp.Services.Promotions
@using WebApp.Services.Products
@using WebApp.Services.Categories
@using WebApp.Services.Brands
@using WebApp.Models.Entities
@using Microsoft.AspNetCore.Authorization
@using WebApp.BlazorPages.Promotions.Components
@using WebApp.Services.Catches
@attribute [Authorize(Policy = "RequireAdminRole")]
@inject IPromotionService PromotionService
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IBrandService BrandService
@inject ICacheService CacheService
@inject MessageService MessageService


<PageTitle>Quản lý Khuyến mãi</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Gift" />
        <span>Quản lý Khuyến mãi</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<PromotionActions SearchText="@_searchText"
                  Loading="_loading"
                  HasActiveFilters="HasActiveFilters()"
                  OnSearch="OnSearch"
                  OnReload="ReloadData"
                  OnCreate="ShowCreateModal"
                  OnClearFilters="ClearFilters" />

<PromotionFilter @bind-FilterType="_filterType"
                 @bind-FilterActive="_filterActive"
                 @bind-MinPriority="_minPriority"
                 @bind-MaxPriority="_maxPriority"
                 OnFilterChanged="OnFilterChange" />

<PromotionList DataSource="@_filteredData"
               Loading="_loading"
               OnView="ShowDetailModal"
               OnEdit="ShowEditModal"
               OnToggleActive="ToggleActiveStatus"
               OnDelete="DeletePromotion" />

<PromotionCreateEditModal Visible="@_createEditModalVisible"
                          IsSubmitting="@_isSubmitting"
                          ModalError="@_modalError"
                          Promotion="editingPromotion"
                          AllProducts="_allProducts"
                          AllCategories="_allCategories"
                          AllBrands="_allBrands"
                          OnSave="OnSavePromotion"
                          OnCancel="OnCreateEditCancel" />

<PromotionDetailModal Visible="@_detailModalVisible"
                      Promotion="_currentDetail"
                      OnCancel="OnDetailCancel" />


@code {
    private IEnumerable<PromotionDto> _data = [];
    private IEnumerable<PromotionDto> _filteredData = [];
    private bool _loading = true;
    private string _searchText = "";
    private bool _createEditModalVisible = false;
    private bool _detailModalVisible = false;
    private PromotionDto? editingPromotion = null;
    private PromotionDto? _currentDetail = null;
    private string _modalError = "";
    private bool _isSubmitting = false;

    // Data for selectors
    private IEnumerable<ProductDto> _allProducts = Enumerable.Empty<ProductDto>();
    private IEnumerable<CategoryDto> _allCategories = Enumerable.Empty<CategoryDto>();
    private IEnumerable<BrandDto> _allBrands = Enumerable.Empty<BrandDto>();

    // Filter variables
    private PromotionType? _filterType = null;
    private bool? _filterActive = null;
    private int? _minPriority = null;
    private int? _maxPriority = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadSelectData();
    }

    private async Task LoadSelectData()
    {
        try
        {
            // Clear cache to ensure fresh data
            await CacheService.RemoveByPrefixAsync("Category_");
            await CacheService.RemoveByPrefixAsync("Brand_");

            _allProducts = [];
            _allCategories = await CategoryService.GetAll();
            _allBrands = await BrandService.GetAll();

            if (!_allCategories.Any())
            {
                MessageService.Warning("Không tìm thấy dữ liệu danh mục. Vui lòng thêm danh mục trước.");
            }

            if (!_allBrands.Any())
            {
                MessageService.Warning("Không tìm thấy dữ liệu thương hiệu. Vui lòng thêm thương hiệu trước.");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu cho lựa chọn: {ex.Message}");
        }
    }

    private async Task ReloadData()
    {
        await LoadData();
        MessageService.Success("Đã tải lại dữ liệu!");
    }

    private async Task OnFilterChange()
    {
        await Task.Delay(300); // Debounce
        ApplyFilters();
    }

    private async Task ClearFilters()
    {
        _searchText = "";
        _filterType = null;
        _filterActive = null;
        _minPriority = null;
        _maxPriority = null;
        await OnFilterChange();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(_searchText) ||
               _filterType.HasValue ||
               _filterActive.HasValue ||
               _minPriority.HasValue ||
               _maxPriority.HasValue;
    }

    private async Task LoadData()
    {
        _loading = true;
        try
        {
            var result = await PromotionService.GetAllAsync();
            _data = result ?? new List<PromotionDto>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
            _data = new List<PromotionDto>();
            _filteredData = new List<PromotionDto>();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var filtered = _data.AsEnumerable();

        if (!string.IsNullOrEmpty(_searchText))
        {
            filtered = filtered.Where(x => x.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }

        if (_filterType.HasValue)
        {
            var typeString = _filterType.Value.ToString();
            filtered = filtered.Where(x => x.Type == typeString);
        }

        if (_filterActive.HasValue)
        {
            filtered = filtered.Where(x => x.IsActive == _filterActive.Value);
        }

        if (_minPriority.HasValue)
        {
            filtered = filtered.Where(x => x.Priority >= _minPriority.Value);
        }

        if (_maxPriority.HasValue)
        {
            filtered = filtered.Where(x => x.Priority <= _maxPriority.Value);
        }

        _filteredData = filtered.ToList();
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        await OnFilterChange();
    }

    private async Task ShowCreateModal()
    {
        editingPromotion = null;
        _modalError = "";
        await LoadSelectData();
        _createEditModalVisible = true;
    }

    private async Task ShowEditModal(PromotionDto promotion)
    {
        editingPromotion = promotion;
        _modalError = "";
        await LoadSelectData();
        _createEditModalVisible = true;
    }

    private async Task OnSavePromotion(PromotionCreateEditModal.PromotionFormModel model)
    {
        _isSubmitting = true;
        _modalError = "";
        try
        {
            var request = new CreatePromotionRequest
            {
                Name = model.Name,
                Description = model.Description,
                Type = model.Type.ToString(),
                Scope = model.Scope.ToString(),
                DiscountValue = model.DiscountValue,
                MaxDiscountAmount = model.MaxDiscountAmount,
                MinOrderAmount = model.MinOrderAmount,
                StartDate = model.StartDate,
                EndDate = model.EndDate,
                Priority = model.Priority,
                ProductIds = model.ProductIds,
                CategoryIds = model.CategoryIds,
                BrandIds = model.BrandIds
            };

            if (editingPromotion == null)
            {
                await PromotionService.CreateAsync(request);
                MessageService.Success("Tạo khuyến mãi thành công!");
            }
            else
            {
                await PromotionService.UpdateAsync(editingPromotion.Id, request);
                MessageService.Success("Cập nhật khuyến mãi thành công!");
            }

            _createEditModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            _modalError = $"Lỗi khi lưu: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void OnCreateEditCancel()
    {
        _createEditModalVisible = false;
    }

    private async Task DeletePromotion(string id)
    {
        try
        {
            await PromotionService.DeleteAsync(id);
            MessageService.Success("Xóa khuyến mãi thành công!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi xóa: {ex.Message}");
        }
    }

    private async Task ToggleActiveStatus(PromotionDto promotion)
    {
        try
        {
            await PromotionService.ToggleActiveStatusAsync(promotion.Id, !promotion.IsActive);
            MessageService.Success($"{(promotion.IsActive ? "Hủy kích hoạt" : "Kích hoạt")} khuyến mãi thành công!");
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi thay đổi trạng thái: {ex.Message}");
        }
    }

    private void ShowDetailModal(PromotionDto promotion)
    {
        _currentDetail = promotion;
        _detailModalVisible = true;
    }

    private void OnDetailCancel()
    {
        _detailModalVisible = false;
    }
}

<style>
    /* Search Controls Row */
    .search-controls-row {
        width: 100%;
    }

    .controls-right {
        justify-content: flex-end;
        width: 100%;
    }

    /* Responsive Filter Styles */
    .desktop-filters {
        display: block;
    }

    .hidden-xs {
        display: inline;
    }

    .d-flex {
        display: flex;
    }

    .justify-content-end {
        justify-content: flex-end;
    }

    /* Mobile Responsive */
    @@media (max-width: 575px) {
        .hidden-xs {
            display: none;
        }

        .ant-col {
            margin-bottom: 8px;
        }

        .d-flex {
            justify-content: center;
        }

        .controls-right {
            justify-content: center;
        }
    }

    /* Improve table responsive */
    .ant-table-wrapper {
        overflow-x: auto;
    }

    /* Better spacing for controls */
    .ant-space-item {
        display: flex;
        align-items: center;
    }

    /* Button hover effects */
    .ant-btn:hover {
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }
</style> 