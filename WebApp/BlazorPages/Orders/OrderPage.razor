@page "/admin/orders"
@using AntDesign.TableModels
@using WebApp.Models
@using WebApp.Models.DTOs
@using WebApp.Services.Orders
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "RequireAdminRole")]
@inject IOrderService orderService
@inject MessageService MessageService

<PageTitle>Quản lý đơn hàng</PageTitle>
<Breadcrumb>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.Home" />
    </BreadcrumbItem>
    <BreadcrumbItem Href="">
        <Icon Type="@IconType.Outline.ShoppingCart" />
        <span>Quản lý đơn hàng</span>
    </BreadcrumbItem>
</Breadcrumb>

<br />

<!-- Search and Controls Row -->
<Row Gutter="16" Style="margin-bottom: 16px;" Class="search-controls-row">
    <Col Xs="24" Sm="14" Md="16" Lg="18">
    <Space Style="width: 100%;">
        <SpaceItem>
            <Input @bind-Value="@_searchText"
                   Placeholder="Tìm theo SĐT, tên khách hàng..."
                   OnChange="@(async (string value) => await OnSearch(value))"
                   Style="width: 300px;">
            <Suffix>
                <Icon Type="search" />
            </Suffix>
            </Input>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Default" OnClick="ShowFilterModal" Class="filter-modal-btn">
                <Icon Type="filter" />
                <span class="hidden-xs">Lọc</span>
            </Button>
        </SpaceItem>
        <SpaceItem>
            @if (HasActiveFilters())
            {
                <Button Type="@ButtonType.Default" OnClick="ClearFilters">
                    <Icon Type="clear" />
                    <span class="hidden-xs">Xóa lọc</span>
                </Button>
            }
        </SpaceItem>
    </Space>
    </Col>

    <Col Xs="24" Sm="10" Md="8" Lg="6" Class="d-flex justify-content-end">
    <Space Style="width: 100%;" Class="controls-right">
        <SpaceItem>
            <Button Type="@ButtonType.Default" OnClick="@ReloadData" Loading="_loading">
                <Icon Type="reload" />
                <span class="hidden-xs">Tải lại</span>
            </Button>
        </SpaceItem>
        <SpaceItem>
            <Select TItem="int"
                    TItemValue="int"
                    Style="width: 120px"
                    @bind-Value="@pageSize"
                    OnChange="@(async (int value) => await OnPageSizeChange(value))">
                <SelectOptions>
                    <SelectOption TItem="int" TItemValue="int" Value="5" Label="5 / trang" />
                    <SelectOption TItem="int" TItemValue="int" Value="10" Label="10 / trang" />
                    <SelectOption TItem="int" TItemValue="int" Value="20" Label="20 / trang" />
                    <SelectOption TItem="int" TItemValue="int" Value="50" Label="50 / trang" />
                </SelectOptions>
            </Select>
        </SpaceItem>
    </Space>
    </Col>
</Row>

<!-- Inline Filters (Desktop) -->
<Card Class="desktop-filters" Style="margin-bottom: 16px;">
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong>Trạng thái:</Text>
        <Select TItem="OrderStatus?"
                TItemValue="OrderStatus?"
                @bind-Value="@_inlineFilterModel.Status"
                Placeholder="Tất cả trạng thái"
                AllowClear="true"
                Style="width: 100%; margin-top: 4px;"
                OnSelectedItemChanged="@(async (OrderStatus? value) => await OnInlineFilterChange())">
            <SelectOptions>
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Pending" Label="Chờ xử lý" />
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Preparing" Label="Đang chuẩn bị" />
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Shipping" Label="Đang giao" />
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Completed" Label="Hoàn thành" />
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Cancelled" Label="Đã hủy" />
                <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Rejected" Label="Từ chối" />
            </SelectOptions>
        </Select>
        </Col>

        <Col Span="6">
        <Text Strong>Phương thức TT:</Text>
        <Select TItem="PaymentMethod?"
                TItemValue="PaymentMethod?"
                @bind-Value="@_inlineFilterModel.PaymentMethod"
                Placeholder="Tất cả phương thức"
                AllowClear="true"
                Style="width: 100%; margin-top: 4px;"
                OnSelectedItemChanged="@(async (PaymentMethod? value) => await OnInlineFilterChange())">
            <SelectOptions>
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.COD" Label="COD" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.BankTranfer" Label="Chuyển khoản" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.CreditCard" Label="Thẻ tín dụng" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.MoMo" Label="MoMo" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.VnPay" Label="VnPay" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.ZaloPay" Label="ZaloPay" />
                <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.PayPal" Label="PayPal" />
            </SelectOptions>
        </Select>
        </Col>

        <Col Span="6">
        <Text Strong>Khoảng thời gian:</Text>
        <div style="margin-top: 4px;">
            <RangePicker @bind-Value="@_inlineFilterModel.DateRange"
                         Format="dd/MM/yyyy"
                         Placeholder="@GetDatePlaceholder()"
                         DefaultPickerValue="@GetDefaultPickerValue()"
                         Style="width: 100%;"
                         OnChange="@(async (DateRangeChangedEventArgs<DateTime[]> args) => await OnInlineFilterChange())" />

            <!-- Quick Date Buttons -->
            <div style="margin-top: 4px; display: flex; gap: 4px; flex-wrap: wrap;">
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetDateRange(GetTodayRange()))">
                    Hôm nay
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetDateRange(GetLast7DaysRange()))">
                    7 ngày
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetDateRange(GetThisMonthRange()))">
                    Tháng này
                </Button>
            </div>
        </div>
        </Col>

        <Col Span="6">
        <Text Strong>Khoảng giá:</Text>
        <div style="margin-top: 4px;">
            <Row Gutter="8">
                <Col Span="12">
                <AntDesign.InputNumber @bind-Value="@_inlineFilterModel.MinAmount"
                                       Placeholder="Từ"
                                       Min="0"
                                       Style="width: 100%"
                                       OnChange="@(async (double? value) => await OnInlineFilterChange())" />
                </Col>
                <Col Span="12">
                <AntDesign.InputNumber @bind-Value="@_inlineFilterModel.MaxAmount"
                                       Placeholder="Đến"
                                       Min="0"
                                       Style="width: 100%"
                                       OnChange="@(async (double? value) => await OnInlineFilterChange())" />
                </Col>
            </Row>
        </div>
        </Col>
    </Row>
</Card>

<p />

<Table @ref=_table
       TItem="OrderDto"
       DataSource="@_data"
       Total="@totalItems"
       PageSize="@pageSize"
       PageIndex="@pageIndex"
       OnChange="@OnTableChange"
       Loading="_loading">
    <PropertyColumn Property="c => c.Id" Title="Mã đơn hàng">
        <Text Code>@context.Id.ToString().Substring(0, 8)...</Text>
    </PropertyColumn>
    <PropertyColumn Property="c => c.CustomerName" Title="Khách hàng">
        <div>
            <div><strong>@context.CustomerName</strong></div>
            <div><Text Type="@TextElementType.Secondary">@context.Phone</Text></div>
        </div>
    </PropertyColumn>
    <PropertyColumn Property="c => c.TotalAmount" Title="Tổng tiền">
        @if (context.DiscountAmount > 0)
        {
            <div>
                <span style="text-decoration: line-through; color: #999;">@context.OriginalAmount.ToString("N0") VND</span>
            </div>
            <div>
                <strong style="color: #52c41a;">@context.TotalAmount.ToString("N0") VND</strong>
                <span style="background: #ff4d4f; color: white; padding: 2px 6px; border-radius: 4px; font-size: 12px; margin-left: 4px;">-@(context.DiscountAmount.ToString("N0")) VND</span>
            </div>
        }
        else
        {
            <strong>@context.TotalAmount.ToString("N0") VND</strong>
        }
    </PropertyColumn>
    <PropertyColumn Property="c => c.Status" Title="Trạng thái">
        @{
            var (color, text) = GetOrderStatusInfo(context.Status);
        }
        <Badge Status="@color" Text="@text" />
    </PropertyColumn>
    <PropertyColumn Property="c => c.PaymentMethod" Title="Thanh toán">
        <Tag Color="@GetPaymentMethodColor(context.PaymentMethod)">
            @GetPaymentMethodText(context.PaymentMethod)
        </Tag>
    </PropertyColumn>
    <PropertyColumn Property="c => c.CreatedAt" Title="Ngày tạo">
        @context.CreatedAt.ToString("dd/MM/yyyy HH:mm")
    </PropertyColumn>
    <ActionColumn Title="Thao tác">
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" OnClick="() => ShowDetailModal(context)">
                    <Icon Type="eye" />
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Default" Size="@ButtonSize.Small" OnClick="() => ShowUpdateStatusModal(context)">
                    <Icon Type="edit" />
                </Button>
            </SpaceItem>
            @if (context.Status == OrderStatus.Pending || context.Status == OrderStatus.PendingPayment || context.Status == OrderStatus.Paid || context.Status == OrderStatus.Preparing)
            {
                <SpaceItem>
                    <Dropdown>
                        <ChildContent>
                            <Button Type="@ButtonType.Default" Size="@ButtonSize.Small">
                                <Icon Type="more" />
                            </Button>
                        </ChildContent>
                        <Overlay>
                            <Menu>
                                <MenuItem Key="cancel" OnClick="@(() => ShowQuickActionModal(context, "cancel"))">
                                    <Icon Type="close" />
                                    <span>Hủy đơn</span>
                                </MenuItem>
                                <MenuItem Key="reject" OnClick="@(() => ShowQuickActionModal(context, "reject"))">
                                    <Icon Type="stop" />
                                    <span>Từ chối</span>
                                </MenuItem>
                            </Menu>
                        </Overlay>
                    </Dropdown>
                </SpaceItem>
            }
        </Space>
    </ActionColumn>
</Table>

<!-- Filter Modal -->
<Modal Title="@("Lọc đơn hàng")"
       Visible="@_filterModalVisible"
       OnOk="@OnFilterOk"
       OnCancel="@OnFilterCancel"
       Width="600">
    <Form Model="@_filterModel" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Tên khách hàng">
            <Input @bind-Value="@_filterModel.CustomerName" />
        </FormItem>
        <FormItem Label="Số điện thoại">
            <Input @bind-Value="@_filterModel.Phone" />
        </FormItem>
        <FormItem Label="Trạng thái">
            <Select TItem="OrderStatus?"
                    TItemValue="OrderStatus?"
                    @bind-Value="@_filterModel.Status"
                    Placeholder="Chọn trạng thái"
                    AllowClear="true">
                <SelectOptions>
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Pending" Label="Chờ xử lý" />
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Preparing" Label="Đang chuẩn bị" />
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Shipping" Label="Đang giao" />
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Completed" Label="Hoàn thành" />
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Cancelled" Label="Đã hủy" />
                    <SelectOption TItem="OrderStatus?" TItemValue="OrderStatus?" Value="OrderStatus.Rejected" Label="Từ chối" />
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Phương thức TT">
            <Select TItem="PaymentMethod?"
                    TItemValue="PaymentMethod?"
                    @bind-Value="@_filterModel.PaymentMethod"
                    Placeholder="Chọn phương thức"
                    AllowClear="true">
                <SelectOptions>
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.COD" Label="COD" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.BankTranfer" Label="Chuyển khoản" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.CreditCard" Label="Thẻ tín dụng" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.MoMo" Label="MoMo" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.VnPay" Label="VnPay" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.ZaloPay" Label="ZaloPay" />
                    <SelectOption TItem="PaymentMethod?" TItemValue="PaymentMethod?" Value="PaymentMethod.PayPal" Label="PayPal" />
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem Label="Khoảng thời gian">
            <RangePicker @bind-Value="@_filterModel.DateRange"
                         Format="dd/MM/yyyy"
                         DefaultPickerValue="@GetDefaultPickerValue()" />

            <!-- Quick Date Buttons -->
            <div style="margin-top: 8px; display: flex; gap: 8px; flex-wrap: wrap;">
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetModalDateRange(GetTodayRange()))">
                    Hôm nay
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetModalDateRange(GetLast7DaysRange()))">
                    7 ngày qua
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetModalDateRange(GetLast30DaysRange()))">
                    30 ngày qua
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetModalDateRange(GetThisMonthRange()))">
                    Tháng này
                </Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Link" OnClick="@(() => SetModalDateRange(GetLastMonthRange()))">
                    Tháng trước
                </Button>
            </div>
        </FormItem>
        <FormItem Label="Khoảng tiền">
            <Row Gutter="8">
                <Col Span="12">
                <AntDesign.InputNumber @bind-Value="@_filterModel.MinAmount" Placeholder="Từ" Min="0" Style="width: 100%" />
                </Col>
                <Col Span="12">
                <AntDesign.InputNumber @bind-Value="@_filterModel.MaxAmount" Placeholder="Đến" Min="0" Style="width: 100%" />
                </Col>
            </Row>
        </FormItem>
    </Form>
</Modal>

<!-- Detail Modal -->
<Modal Title="@("Chi tiết đơn hàng")"
       Visible="@_detailModalVisible"
       OnCancel="@OnDetailCancel"
       Width="800"
       Footer="null">
    @if (_currentOrder != null)
    {
        <Descriptions Title="Thông tin khách hàng" Bordered="true" Column="2">
            <DescriptionsItem Title="Tên khách hàng">@_currentOrder.CustomerName</DescriptionsItem>
            <DescriptionsItem Title="Số điện thoại">@_currentOrder.Phone</DescriptionsItem>
            <DescriptionsItem Title="Email">@(_currentOrder.Email ?? "Không có")</DescriptionsItem>
            <DescriptionsItem Title="Địa chỉ">@_currentOrder.Address</DescriptionsItem>
            <DescriptionsItem Title="Ghi chú khách hàng" Span="2">
                @(_currentOrder.CustomerNote ?? "Không có")
            </DescriptionsItem>
        </Descriptions>

        <br />

        <Descriptions Title="Thông tin đơn hàng" Bordered="true" Column="2">
            <DescriptionsItem Title="Mã đơn hàng">
                <Text Code>@_currentOrder.Id</Text>
            </DescriptionsItem>
            <DescriptionsItem Title="Ngày tạo">
                @_currentOrder.CreatedAt.ToString("dd/MM/yyyy HH:mm")
            </DescriptionsItem>
            <DescriptionsItem Title="Trạng thái">
                @{
                    var (color, text) = GetOrderStatusInfo(_currentOrder.Status);
                }
                <Badge Status="@color" Text="@text" />
            </DescriptionsItem>
            <DescriptionsItem Title="Phương thức TT">
                <Tag Color="@GetPaymentMethodColor(_currentOrder.PaymentMethod)">
                    @GetPaymentMethodText(_currentOrder.PaymentMethod)
                </Tag>
            </DescriptionsItem>
            <DescriptionsItem Title="Voucher" Span="2">
                @if (!string.IsNullOrEmpty(_currentOrder.VoucherCode))
                {
                    <div>
                        <div><strong>@_currentOrder.VoucherCode</strong></div>
                        @if (!string.IsNullOrEmpty(_currentOrder.VoucherName))
                        {
                            <div style="color: #666; font-size: 12px;">@_currentOrder.VoucherName</div>
                        }
                    </div>
                }
                else
                {
                    <span style="color: #999;">Không có</span>
                }
            </DescriptionsItem>
            <DescriptionsItem Title="Ghi chú admin">
                @(_currentOrder.Note ?? "Không có")
            </DescriptionsItem>
        </Descriptions>

        <br />

        <Card Title="Danh sách sản phẩm">
            <Table TItem="OrderItemDto" DataSource="@_currentOrder.Items" HidePagination="true">
                <PropertyColumn Property="c => c.MainImage" Title="Ảnh">
                    <Avatar Size="@("3rem")" Src="@context.MainImage" />
                </PropertyColumn>
                <PropertyColumn Property="c => c.ProductName" Title="Sản phẩm">
                    <div>
                        <div><strong>@context.ProductName</strong></div>
                        <div><Text Type="@TextElementType.Secondary">Size: @context.Size</Text></div>
                    </div>
                </PropertyColumn>
                <PropertyColumn Property="c => c.Price" Title="Đơn giá">
                    @context.Price.ToString("N0") VND
                </PropertyColumn>
                <PropertyColumn Property="c => c.Quantity" Title="SL">
                    @context.Quantity
                </PropertyColumn>
                <PropertyColumn Property="c => c.Subtotal" Title="Thành tiền">
                    <Text Strong>@context.Subtotal.ToString("N0") VND</Text>
                </PropertyColumn>
            </Table>
            <div style="text-align: right; margin-top: 16px; padding-top: 16px; border-top: 1px solid #f0f0f0;">

                @if (_currentOrder.DiscountAmount > 0)
                {
                    <div style="margin-bottom: 8px;">
                        <span style="color: #666;">Tạm tính: </span>
                        <span style="text-decoration: line-through; color: #999;">@_currentOrder.OriginalAmount.ToString("N0") VND</span>
                    </div>
                    <div style="margin-bottom: 8px;">
                        <span style="color: #666;">Giảm giá: </span>
                        <span style="color: #ff4d4f; font-weight: bold;">-@_currentOrder.DiscountAmount.ToString("N0") VND</span>
                    </div>
                    <div style="border-top: 1px solid #f0f0f0; padding-top: 8px;">
                        <strong style="font-size: 16px; color: #52c41a;">
                            Tổng cộng: @_currentOrder.TotalAmount.ToString("N0") VND
                        </strong>
                    </div>
                }
                else
                {
                    <strong style="font-size: 16px;">
                        Tổng cộng: @_currentOrder.TotalAmount.ToString("N0") VND
                    </strong>
                }
            </div>
        </Card>

        @* Quick Status Actions in Detail Modal *@
        @if (GetAvailableStatusTransitions(_currentOrder.Status).Any())
        {
            <Card Title="Cập nhật trạng thái" Style="margin-top: 16px;">
                <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                    @foreach (var nextStatus in GetAvailableStatusTransitions(_currentOrder.Status))
                    {
                        var (nextColor, nextText) = GetOrderStatusInfo(nextStatus);
                        var buttonType = GetButtonTypeForStatus(nextStatus);
                        var iconType = GetIconTypeForStatus(nextStatus);

                        <Button Type="@buttonType"
                                Size="@ButtonSize.Default"
                                OnClick="() => OnDetailStatusAction(nextStatus)">
                            <Icon Type="@iconType" />
                            <span style="margin-left: 4px;">@nextText</span>
                        </Button>
                    }
                </div>
            </Card>
        }
    }
</Modal>

<!-- Update Status Modal -->
<Modal Title="@("Cập nhật trạng thái đơn hàng")"
       Visible="@_updateStatusModalVisible"
       OnCancel="@OnUpdateStatusCancel"
       Width="600"
       Footer="null">
    @if (_currentOrder != null)
    {
        <div style="margin-bottom: 16px;">
            <Text Strong>Đơn hàng: </Text>
            <Text Code>@_currentOrder.Id.ToString().Substring(0, 8)...</Text>
        </div>

        <div style="margin-bottom: 16px;">
            <Text Strong>Trạng thái hiện tại: </Text>
            @{
                var (color, text) = GetOrderStatusInfo(_currentOrder.Status);
            }
            <Badge Status="@color" Text="@text" />
        </div>

        <Divider>Chuyển trạng thái</Divider>

        <div style="display: flex; flex-direction: column; gap: 12px;">
            @foreach (var nextStatus in GetAvailableStatusTransitions(_currentOrder.Status))
            {
                var (nextColor, nextText) = GetOrderStatusInfo(nextStatus);
                var buttonType = GetButtonTypeForStatus(nextStatus);
                var iconType = GetIconTypeForStatus(nextStatus);

                <Button Type="@buttonType"
                        Size="@ButtonSize.Large"
                        Block="true"
                        OnClick="() => OnStatusActionClick(nextStatus)">
                    <Icon Type="@iconType" />
                    <span style="margin-left: 8px;">@nextText</span>
                    @if (nextStatus == OrderStatus.Cancelled || nextStatus == OrderStatus.Rejected)
                    {
                        <span style="color: #999; font-size: 12px; margin-left: 8px;">(Hoàn tồn kho)</span>
                    }
                </Button>
            }
        </div>

        @if (_showNoteInput)
        {
            <div style="margin-top: 16px;">
                <Text Strong>Ghi chú:</Text>
                <TextArea @bind-Value="@_statusNote"
                          Rows="3"
                          Placeholder="Thêm ghi chú (tùy chọn)"
                          Style="margin-top: 8px;" />
                <div style="margin-top: 12px; text-align: right;">
                    <Button OnClick="() => _showNoteInput = false" Style="margin-right: 8px;">Hủy</Button>
                    <Button Type="@ButtonType.Primary" OnClick="() => ConfirmStatusChange()">Xác nhận</Button>
                </div>
            </div>
        }
    }
</Modal>

<!-- Quick Action Modal -->
<Modal Title="@GetQuickActionTitle()"
       Visible="@_quickActionModalVisible"
       OnOk="@OnQuickActionOk"
       OnCancel="@OnQuickActionCancel"
       Width="400">
    @if (_currentOrder != null)
    {
        <div style="margin-bottom: 16px;">
            <Text Strong>Đơn hàng: </Text>
            <Text Code>@_currentOrder.Id.ToString().Substring(0, 8)...</Text>
        </div>

        <Alert Type="@AlertType.Warning"
               Message="@GetQuickActionWarning()"
               Style="margin-bottom: 16px;" />

        <FormItem Label="Ghi chú">
            <TextArea @bind-Value="@_quickActionNote"
                      Rows="3"
                      Placeholder="Thêm ghi chú (tùy chọn)" />
        </FormItem>
    }
</Modal>

@code {
    private IEnumerable<OrderDto> _data = [];
    private ITable _table = default!;
    private bool _loading = true;
    private string _searchText = "";
    private bool _filterModalVisible = false;
    private bool _detailModalVisible = false;
    private bool _updateStatusModalVisible = false;
    private bool _quickActionModalVisible = false;
    private FilterModel _filterModel = new();
    private FilterModel _inlineFilterModel = new();
    private Dictionary<string, string> _currentFilter = new();
    private OrderDto? _currentOrder;
    private bool _showNoteInput = false;
    private string _statusNote = "";
    private OrderStatus _pendingStatus;
    private string _quickActionType = "";
    private string _quickActionNote = "";

    private int pageSize = 10;
    private int pageIndex = 1;
    private int totalItems = 0;

    private class FilterModel
    {
        public string CustomerName { get; set; } = "";
        public string Phone { get; set; } = "";
        public OrderStatus? Status { get; set; }
        public PaymentMethod? PaymentMethod { get; set; }
        public DateTime[]? DateRange { get; set; }
        public double? MinAmount { get; set; }
        public double? MaxAmount { get; set; }
    }



    protected override async Task OnInitializedAsync()
    {
        // Set default 7 days range on page load
        var defaultDateRange = GetLast7DaysRange();
        _inlineFilterModel.DateRange = defaultDateRange;
        _filterModel.DateRange = defaultDateRange;

        // Apply default 7 days filter
        _currentFilter["startDate"] = defaultDateRange[0].ToString("yyyy-MM-dd");
        _currentFilter["endDate"] = defaultDateRange[1].ToString("yyyy-MM-dd");

        await LoadData();
    }

    private async Task ReloadData()
    {
        await LoadData();
        MessageService.Success("Đã tải lại dữ liệu!");
    }

    private async Task OnInlineFilterChange()
    {
        await Task.Delay(300); // Debounce

        _currentFilter.Clear();

        if (!string.IsNullOrEmpty(_searchText))
        {
            _currentFilter["phone"] = _searchText;
            _currentFilter["name"] = _searchText;
        }

        if (_inlineFilterModel.Status.HasValue)
            _currentFilter["status"] = _inlineFilterModel.Status.Value.ToString();
        if (_inlineFilterModel.PaymentMethod.HasValue)
            _currentFilter["paymentMethod"] = _inlineFilterModel.PaymentMethod.Value.ToString();
        if (_inlineFilterModel.DateRange != null && _inlineFilterModel.DateRange.Length == 2)
        {
            _currentFilter["startDate"] = _inlineFilterModel.DateRange[0].ToString("yyyy-MM-dd");
            _currentFilter["endDate"] = _inlineFilterModel.DateRange[1].ToString("yyyy-MM-dd");
        }
        if (_inlineFilterModel.MinAmount.HasValue)
            _currentFilter["minAmount"] = _inlineFilterModel.MinAmount.Value.ToString();
        if (_inlineFilterModel.MaxAmount.HasValue)
            _currentFilter["maxAmount"] = _inlineFilterModel.MaxAmount.Value.ToString();

        pageIndex = 1;
        await LoadData();
    }

    private string[] GetDatePlaceholder()
    {
        var today = DateTime.Now;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        return new[] { startOfWeek.ToString("dd/MM/yyyy"), today.ToString("dd/MM/yyyy") };
    }

    private DateTime[] GetDefaultPickerValue()
    {
        var today = DateTime.Now;
        return new[] { today.AddDays(-7), today }; // Mặc định hiển thị tháng hiện tại
    }

    private DateTime[] GetTodayRange()
    {
        var today = DateTime.Now.Date;
        return new[] { today, today };
    }

    private DateTime[] GetLast7DaysRange()
    {
        var today = DateTime.Now.Date;
        return new[] { today.AddDays(-6), today };
    }

    private DateTime[] GetLast30DaysRange()
    {
        var today = DateTime.Now.Date;
        return new[] { today.AddDays(-29), today };
    }

    private DateTime[] GetThisMonthRange()
    {
        var today = DateTime.Now.Date;
        var startOfMonth = new DateTime(today.Year, today.Month, 1);
        return new[] { startOfMonth, today };
    }

    private DateTime[] GetLastMonthRange()
    {
        var today = DateTime.Now.Date;
        var startOfLastMonth = new DateTime(today.Year, today.Month, 1).AddMonths(-1);
        var endOfLastMonth = startOfLastMonth.AddMonths(1).AddDays(-1);
        return new[] { startOfLastMonth, endOfLastMonth };
    }

    private async Task SetDateRange(DateTime[] range)
    {
        _inlineFilterModel.DateRange = range;
        await OnInlineFilterChange();
    }

    private void SetModalDateRange(DateTime[] range)
    {
        _filterModel.DateRange = range;
    }

    private bool HasActiveFilters()
    {
        // Check if there are any filters other than the default 7 days range
        if (!string.IsNullOrEmpty(_searchText)) return true;
        if (_inlineFilterModel.Status.HasValue) return true;
        if (_inlineFilterModel.PaymentMethod.HasValue) return true;
        if (_inlineFilterModel.MinAmount.HasValue) return true;
        if (_inlineFilterModel.MaxAmount.HasValue) return true;

        // Check if date range is different from default 7 days
        if (_inlineFilterModel.DateRange != null && _inlineFilterModel.DateRange.Length == 2)
        {
            var defaultRange = GetLast7DaysRange();
            var currentStart = _inlineFilterModel.DateRange[0].Date;
            var currentEnd = _inlineFilterModel.DateRange[1].Date;
            var defaultStart = defaultRange[0].Date;
            var defaultEnd = defaultRange[1].Date;

            if (currentStart != defaultStart || currentEnd != defaultEnd)
                return true;
        }

        return false;
    }

    private async Task LoadData()
    {
        _loading = true;
        await Task.Delay(100);

        try
        {
            var result = await orderService.FilterAndPaging(pageIndex, pageSize, _currentFilter);
            _data = result.Data;
            totalItems = result.ItemCount;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string value)
    {
        _searchText = value;
        if (!string.IsNullOrEmpty(value))
        {
            // Use "search" key for combined phone/name search
            _currentFilter["phone"] = value;
            _currentFilter["name"] = value;
        }
        else
        {
            _currentFilter.Remove("phone");
            _currentFilter.Remove("name");
        }
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnPageSizeChange(int newSize)
    {
        pageSize = newSize;
        pageIndex = 1;
        await LoadData();
    }

    private async Task OnTableChange(QueryModel<OrderDto> queryModel)
    {
        pageIndex = queryModel.PageIndex;
        pageSize = queryModel.PageSize;
        await LoadData();
    }

    private void ShowFilterModal()
    {
        _filterModel = new FilterModel
        {
            CustomerName = _currentFilter.GetValueOrDefault("name", ""),
            Phone = _currentFilter.GetValueOrDefault("phone", ""),
            Status = _currentFilter.ContainsKey("status") ? Enum.Parse<OrderStatus>(_currentFilter["status"]) : null,
            PaymentMethod = _currentFilter.ContainsKey("paymentMethod") ? Enum.Parse<PaymentMethod>(_currentFilter["paymentMethod"]) : null,
            MinAmount = _currentFilter.ContainsKey("minAmount") ? double.Parse(_currentFilter["minAmount"]) : null,
            MaxAmount = _currentFilter.ContainsKey("maxAmount") ? double.Parse(_currentFilter["maxAmount"]) : null
        };
        _filterModalVisible = true;
    }

    private async Task OnFilterOk()
    {
        _currentFilter.Clear();

        if (!string.IsNullOrEmpty(_filterModel.CustomerName))
            _currentFilter["name"] = _filterModel.CustomerName;
        if (!string.IsNullOrEmpty(_filterModel.Phone))
            _currentFilter["phone"] = _filterModel.Phone;
        if (_filterModel.Status.HasValue)
            _currentFilter["status"] = _filterModel.Status.Value.ToString();
        if (_filterModel.PaymentMethod.HasValue)
            _currentFilter["paymentMethod"] = _filterModel.PaymentMethod.Value.ToString();
        if (_filterModel.MinAmount.HasValue)
            _currentFilter["minAmount"] = _filterModel.MinAmount.Value.ToString();
        if (_filterModel.MaxAmount.HasValue)
            _currentFilter["maxAmount"] = _filterModel.MaxAmount.Value.ToString();

        pageIndex = 1;
        await LoadData();
        _filterModalVisible = false;
    }

    private void OnFilterCancel()
    {
        _filterModalVisible = false;
    }

    private async Task ClearFilters()
    {
        _currentFilter.Clear();
        _searchText = "";

        // Reset filters but keep 7 days date range as default
        var defaultDateRange = GetLast7DaysRange();
        _filterModel = new FilterModel { DateRange = defaultDateRange };
        _inlineFilterModel = new FilterModel { DateRange = defaultDateRange };

        // Apply 7 days filter
        _currentFilter["startDate"] = defaultDateRange[0].ToString("yyyy-MM-dd");
        _currentFilter["endDate"] = defaultDateRange[1].ToString("yyyy-MM-dd");

        pageIndex = 1;
        await LoadData();
        MessageService.Success("Đã xóa bộ lọc! Hiển thị 7 ngày gần nhất.");
    }

    private async Task ShowDetailModal(OrderDto order)
    {
        try
        {
            _currentOrder = await orderService.GetOrderById(order.Id);
            _detailModalVisible = true;
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải chi tiết đơn hàng: {ex.Message}");
        }
    }

    private void OnDetailCancel()
    {
        _detailModalVisible = false;
        _currentOrder = null;
    }

    private void ShowUpdateStatusModal(OrderDto order)
    {
        _currentOrder = order;
        _showNoteInput = false;
        _statusNote = "";
        _updateStatusModalVisible = true;
    }

    private void OnStatusActionClick(OrderStatus status)
    {
        _pendingStatus = status;
        if (status == OrderStatus.Cancelled || status == OrderStatus.Rejected)
        {
            _showNoteInput = true;
        }
        else
        {
            _statusNote = "";
            ConfirmStatusChange();
        }
    }

    private async Task ConfirmStatusChange()
    {
        try
        {
            if (_pendingStatus == OrderStatus.Cancelled)
            {
                await orderService.AdminCancelOrder(_currentOrder!.Id, _statusNote);
                MessageService.Success("Hủy đơn hàng thành công! Đã hoàn tồn kho.");
            }
            else if (_pendingStatus == OrderStatus.Rejected)
            {
                await orderService.AdminRejectOrder(_currentOrder!.Id, _statusNote);
                MessageService.Success("Từ chối đơn hàng thành công! Đã hoàn tồn kho.");
            }
            else
            {
                await orderService.UpdateOrderStatus(_currentOrder!.Id, (int)_pendingStatus, _statusNote);
                MessageService.Success("Cập nhật trạng thái thành công!");
            }

            _updateStatusModalVisible = false;
            _showNoteInput = false;
            _statusNote = "";
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật trạng thái: {ex.Message}");
        }
    }

    private void OnUpdateStatusCancel()
    {
        _updateStatusModalVisible = false;
        _showNoteInput = false;
        _statusNote = "";
        _currentOrder = null;
    }

    private void ShowQuickActionModal(OrderDto order, string actionType)
    {
        _currentOrder = order;
        _quickActionType = actionType;
        _quickActionNote = "";
        _quickActionModalVisible = true;
    }

    private async Task OnQuickActionOk()
    {
        try
        {
            if (_quickActionType == "cancel")
            {
                await orderService.AdminCancelOrder(_currentOrder!.Id, _quickActionNote);
                MessageService.Success("Hủy đơn hàng thành công! Đã hoàn tồn kho.");
            }
            else if (_quickActionType == "reject")
            {
                await orderService.AdminRejectOrder(_currentOrder!.Id, _quickActionNote);
                MessageService.Success("Từ chối đơn hàng thành công! Đã hoàn tồn kho.");
            }

            _quickActionModalVisible = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi thực hiện thao tác: {ex.Message}");
        }
    }

    private void OnQuickActionCancel()
    {
        _quickActionModalVisible = false;
        _currentOrder = null;
        _quickActionType = "";
        _quickActionNote = "";
    }

    private async Task OnDetailStatusAction(OrderStatus status)
    {
        try
        {
            if (status == OrderStatus.Cancelled)
            {
                await orderService.AdminCancelOrder(_currentOrder!.Id);
                MessageService.Success("Hủy đơn hàng thành công! Đã hoàn tồn kho.");
            }
            else if (status == OrderStatus.Rejected)
            {
                await orderService.AdminRejectOrder(_currentOrder!.Id);
                MessageService.Success("Từ chối đơn hàng thành công! Đã hoàn tồn kho.");
            }
            else
            {
                await orderService.UpdateOrderStatus(_currentOrder!.Id, (int)status);
                MessageService.Success("Cập nhật trạng thái thành công!");
            }

            // Refresh current order detail
            _currentOrder = await orderService.GetOrderById(_currentOrder.Id);
            await LoadData();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi cập nhật trạng thái: {ex.Message}");
        }
    }

    private (BadgeStatus color, string text) GetOrderStatusInfo(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => (BadgeStatus.Warning, "Chờ xử lý"),
            OrderStatus.PendingPayment => (BadgeStatus.Warning, "Chờ thanh toán"),
            OrderStatus.Paid => (BadgeStatus.Success, "Đã thanh toán"),
            OrderStatus.Preparing => (BadgeStatus.Processing, "Đang chuẩn bị"),
            OrderStatus.Shipping => (BadgeStatus.Success, "Đang giao"),
            OrderStatus.Completed => (BadgeStatus.Success, "Hoàn thành"),
            OrderStatus.Cancelled => (BadgeStatus.Error, "Đã hủy"),
            OrderStatus.Rejected => (BadgeStatus.Default, "Từ chối"),
            _ => (BadgeStatus.Default, "Không xác định")
        };
    }

    private string GetPaymentMethodColor(PaymentMethod method)
    {
        return method switch
        {
            PaymentMethod.COD => "orange",
            PaymentMethod.BankTranfer => "blue",
            PaymentMethod.CreditCard => "purple",
            PaymentMethod.MoMo => "pink",
            PaymentMethod.VnPay => "red",
            PaymentMethod.ZaloPay => "cyan",
            PaymentMethod.PayPal => "geekblue",
            _ => "default"
        };
    }

    private string GetPaymentMethodText(PaymentMethod method)
    {
        return method switch
        {
            PaymentMethod.COD => "COD",
            PaymentMethod.BankTranfer => "Chuyển khoản",
            PaymentMethod.CreditCard => "Thẻ tín dụng",
            PaymentMethod.MoMo => "MoMo",
            PaymentMethod.VnPay => "VnPay",
            PaymentMethod.ZaloPay => "ZaloPay",
            PaymentMethod.PayPal => "PayPal",
            _ => "Không xác định"
        };
    }

    private List<OrderStatus> GetAvailableStatusTransitions(OrderStatus currentStatus)
    {
        return currentStatus switch
        {
            OrderStatus.Pending => new List<OrderStatus> { OrderStatus.Preparing, OrderStatus.Cancelled, OrderStatus.Rejected },
            OrderStatus.PendingPayment => new List<OrderStatus> { OrderStatus.Paid, OrderStatus.Cancelled, OrderStatus.Rejected },
            OrderStatus.Paid => new List<OrderStatus> { OrderStatus.Preparing, OrderStatus.Cancelled },
            OrderStatus.Preparing => new List<OrderStatus> { OrderStatus.Shipping, OrderStatus.Cancelled },
            OrderStatus.Shipping => new List<OrderStatus> { OrderStatus.Completed },
            OrderStatus.Completed => new List<OrderStatus>(), // No transitions from completed
            OrderStatus.Cancelled => new List<OrderStatus>(), // No transitions from cancelled
            OrderStatus.Rejected => new List<OrderStatus>(), // No transitions from rejected
            _ => new List<OrderStatus>()
        };
    }

    private ButtonType GetButtonTypeForStatus(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.PendingPayment => ButtonType.Primary,
            OrderStatus.Paid => ButtonType.Primary,
            OrderStatus.Preparing => ButtonType.Primary,
            OrderStatus.Shipping => ButtonType.Primary,
            OrderStatus.Completed => ButtonType.Primary,
            OrderStatus.Cancelled => ButtonType.Default,
            OrderStatus.Rejected => ButtonType.Default,
            _ => ButtonType.Default
        };
    }

    private string GetIconTypeForStatus(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.PendingPayment => "credit-card",
            OrderStatus.Paid => "check-circle",
            OrderStatus.Preparing => "tool",
            OrderStatus.Shipping => "car",
            OrderStatus.Completed => "check-circle",
            OrderStatus.Cancelled => "close-circle",
            OrderStatus.Rejected => "stop",
            _ => "question-circle"
        };
    }

    private string GetQuickActionTitle()
    {
        return _quickActionType switch
        {
            "cancel" => "Xác nhận hủy đơn hàng",
            "reject" => "Xác nhận từ chối đơn hàng",
            _ => "Xác nhận thao tác"
        };
    }

    private string GetQuickActionWarning()
    {
        return _quickActionType switch
        {
            "cancel" => "Hủy đơn hàng sẽ hoàn lại số lượng tồn kho cho tất cả sản phẩm trong đơn.",
            "reject" => "Từ chối đơn hàng sẽ hoàn lại số lượng tồn kho cho tất cả sản phẩm trong đơn.",
            _ => "Bạn có chắc chắn muốn thực hiện thao tác này?"
        };
    }
}

<style>
    /* Search Controls Row */
    .search-controls-row {
        width: 100%;
    }

    .controls-right {
        justify-content: flex-end;
        width: 100%;
    }

    /* Responsive Filter Styles */

    .desktop-filters {
        display: block;
    }

    .filter-modal-btn {
        display: none;
    }

    .hidden-xs {
        display: inline;
    }

    .d-flex {
        display: flex;
    }

    .justify-content-end {
        justify-content: flex-end;
    }

    /* Mobile Responsive */
    @@media (max-width: 991px) {
        .desktop-filters {
            display: none;
        }

        .filter-modal-btn {
            display: inline-block;
        }
    }

    @@media (max-width: 575px) {
        .hidden-xs {
            display: none;
        }

        .ant-col {
            margin-bottom: 8px;
        }

        .d-flex {
            justify-content: center;
        }

        .controls-right {
            justify-content: center;
        }
    }



    /* Improve table responsive */
    .ant-table-wrapper {
        overflow-x: auto;
    }

    /* Better spacing for controls */
    .ant-space-item {
        display: flex;
        align-items: center;
    }



    /* Button hover effects */
    .ant-btn:hover {
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }
</style>
