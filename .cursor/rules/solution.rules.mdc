---
description: 
globs: 
alwaysApply: true
---
# Solution Rules (Optimized)

## Roles & Technologies
- Fullstack: ASP.NET Core (Blazor Server) for backend/admin, ReactJS (JavaScript, Shadcn UI) for frontend.

## System Overview
- Two main projects:
  1. **Backend**: ASP.NET Core + Blazor Server (Admin, Page render mode). Feature-based folder structure. Use EF Core for CRUD. API & Blazor pages call services directly.
  2. **Frontend**: ReactJS 18, Shadcn UI. Calls backend APIs directly.

## Best Practices
- Follow language-specific conventions:
  - C#: PascalCase (class, method), camelCase (local vars).
  - JS: camelCase (vars, funcs).
- Always verify API data types and JSON structure.
- Organize code by feature/folder: `Services`, `BlazorPages`, `Components`, `Controllers`, etc.
- Use DI for all services. Register new services in Program.cs.
- Secure APIs with JWT, admin with Cookie auth.
- Optimize queries for large tables.
- Always provide user feedback (loading, result) on UI actions.

