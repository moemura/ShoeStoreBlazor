import axios from 'axios';

const API_URL = 'https://localhost:5001/api';

// Helper function to get headers with authorization
const getHeaders = () => {
  const token = localStorage.getItem('token');
  const headers = {
    'Content-Type': 'application/json',
  };
  
  if (token) {
    headers.Authorization = `Bearer ${token}`;
  }
  
  return headers;
};

export const paymentService = {
  // Initiate payment
  initiatePayment: async (paymentRequest) => {
    try {
      const response = await axios.post(`${API_URL}/payment/initiate`, paymentRequest, {
        headers: getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error initiating payment:', error);
      throw error;
    }
  },

  // Get payment status by order ID
  getPaymentStatus: async (orderId) => {
    try {
      const response = await axios.get(`${API_URL}/payment/status/${orderId}`, {
        headers: getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error getting payment status:', error);
      throw error;
    }
  },

  // Get payment transaction by transaction ID
  getPaymentTransaction: async (transactionId) => {
    try {
      const response = await axios.get(`${API_URL}/payment/transaction/${transactionId}`, {
        headers: getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error getting payment transaction:', error);
      throw error;
    }
  },

  // Expire payment transaction
  expirePaymentTransaction: async (paymentTransactionId) => {
    try {
      const response = await axios.post(`${API_URL}/payment/expire/${paymentTransactionId}`, {}, {
        headers: getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error expiring payment transaction:', error);
      throw error;
    }
  },

  // Process payment result from callback URL
  processPaymentResult: (urlParams) => {
    const params = new URLSearchParams(urlParams);
    const transactionId = params.get('transactionId');
    const status = params.get('status');
    const orderId = params.get('orderId');

    // Determine payment result based on status codes
    let isSuccess = false;
    let message = 'Thanh to√°n kh√¥ng th√†nh c√¥ng';

    if (status === '0' || status === '00') {
      isSuccess = true;
      message = 'Thanh to√°n th√†nh c√¥ng';
    } else if (status === '24') {
      message = 'Ng∆∞·ªùi d√πng ƒë√£ h·ªßy thanh to√°n';
    } else if (status === '11') {
      message = 'ƒê√£ h·∫øt h·∫°n thanh to√°n';
    } else if (status === 'error') {
      message = 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n';
    }

    return {
      success: isSuccess,
      transactionId,
      orderId,
      status,
      message
    };
  },

  // Get available payment methods
  getPaymentMethods: () => {
    return [
      {
        id: 0,
        name: 'COD',
        displayName: 'Thanh to√°n khi nh·∫≠n h√†ng',
        icon: 'üíµ',
        description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng'
      },
      {
        id: 3,
        name: 'MoMo',
        displayName: 'V√≠ MoMo',
        icon: 'üü°',
        description: 'Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ MoMo'
      },
      {
        id: 4,
        name: 'VnPay',
        displayName: 'VnPay',
        icon: 'üîµ',
        description: 'Thanh to√°n qua VnPay'
      }
    ];
  },

  // Format payment method display
  formatPaymentMethod: (paymentMethodId) => {
    const methods = paymentService.getPaymentMethods();
    const method = methods.find(m => m.id === paymentMethodId);
    return method ? method.displayName : 'Kh√¥ng x√°c ƒë·ªãnh';
  },

  // Format payment status display
  formatPaymentStatus: (status) => {
    const statusMap = {
      1: { text: 'Ch·ªù thanh to√°n', color: 'orange' },
      2: { text: 'ƒêang x·ª≠ l√Ω', color: 'blue' },
      3: { text: 'Th√†nh c√¥ng', color: 'green' },
      4: { text: 'Th·∫•t b·∫°i', color: 'red' },
      5: { text: 'ƒê√£ h·ªßy', color: 'gray' },
      6: { text: 'H·∫øt h·∫°n', color: 'red' },
      7: { text: 'ƒê√£ ho√†n ti·ªÅn', color: 'purple' }
    };
    
    return statusMap[status] || { text: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'gray' };
  }
}; 